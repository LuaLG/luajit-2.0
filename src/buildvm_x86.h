/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.2.1, DynASM x86 version 1.2.1
** DO NOT EDIT! The original file is in "buildvm_x86.dasc".
*/

#if DASM_VERSION != 10201
#error "Version mismatch between DynASM and included encoding engine"
#endif

#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
static const unsigned char build_actionlist[15184] = {
  254,1,248,10,137,202,139,173,233,137,114,252,252,15,182,141,233,139,181,233,
  139,189,233,139,108,36,48,141,12,202,141,68,194,252,252,59,141,233,15,135,
  244,11,248,9,189,237,248,1,137,40,137,104,8,131,192,16,57,200,15,130,244,
  1,255,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,
  12,137,113,252,252,141,52,197,237,141,148,253,49,233,137,106,252,248,139,
  173,233,137,114,252,252,15,182,181,233,141,60,252,242,139,116,36,48,141,66,
  4,59,190,233,15,135,244,13,15,182,181,233,133,252,246,15,132,244,248,248,
  1,131,193,8,57,209,15,131,244,248,139,121,252,248,137,120,252,252,139,121,
  252,252,137,56,131,192,8,199,65,252,252,237,131,252,238,1,15,133,244,1,248,
  2,15,182,141,233,139,181,233,255,139,189,233,141,12,202,252,233,244,9,248,
  14,137,113,252,252,139,189,233,139,108,36,48,141,68,193,252,248,137,141,233,
  141,136,233,137,133,233,59,141,233,137,124,36,4,137,44,36,15,135,244,15,199,
  131,233,237,252,255,147,233,199,131,233,237,139,149,233,141,12,194,252,247,
  217,3,141,233,248,16,131,192,1,137,68,36,20,252,247,198,237,255,15,132,244,
  17,252,233,244,18,248,19,137,113,252,252,139,189,233,139,108,36,48,141,68,
  193,252,248,137,141,233,141,136,233,137,133,233,59,141,233,137,44,36,15,135,
  244,15,199,131,233,237,252,255,215,199,131,233,237,139,149,233,141,12,194,
  252,247,217,3,141,233,248,16,131,192,1,137,68,36,20,252,247,198,237,255,15,
  132,244,17,248,18,252,247,198,237,15,132,244,20,199,131,233,237,131,230,252,
  248,41,214,252,247,222,131,232,1,15,132,244,248,248,1,139,44,10,137,106,252,
  248,139,108,10,4,137,106,252,252,131,194,8,131,232,1,15,133,244,1,248,2,139,
  108,36,48,137,181,233,248,3,139,68,36,20,139,76,36,56,248,4,57,193,15,133,
  244,252,248,5,255,131,252,234,8,137,149,233,248,21,139,76,36,52,137,141,233,
  49,192,248,22,131,196,28,91,94,95,93,195,248,6,15,130,244,253,59,149,233,
  15,135,244,254,199,66,252,252,237,131,194,8,131,192,1,252,233,244,4,248,7,
  133,201,15,132,244,5,41,193,141,20,202,252,233,244,5,248,8,137,149,233,255,
  137,68,36,20,137,202,137,252,233,232,251,1,0,139,149,233,252,233,244,3,248,
  23,139,76,36,4,139,68,36,8,129,225,239,137,204,139,108,36,48,139,173,233,
  199,133,233,237,252,233,244,22,248,24,139,76,36,4,129,225,239,137,204,139,
  108,36,48,185,252,248,252,255,252,255,252,255,184,237,139,149,233,139,157,
  233,129,195,239,139,114,252,252,199,66,252,252,237,199,131,233,237,252,233,
  244,16,248,20,255,252,247,198,237,15,132,244,25,131,230,252,248,41,252,242,
  141,76,49,252,248,139,114,252,252,199,68,10,4,237,252,233,244,16,248,15,186,
  237,252,233,244,247,248,13,131,232,8,137,202,137,252,249,139,181,233,139,
  108,36,48,248,11,131,232,4,41,209,193,252,233,3,131,198,4,137,149,233,137,
  133,233,137,116,36,24,137,202,248,1,137,252,233,232,251,1,0,139,141,233,139,
  133,233,139,105,252,248,139,113,252,252,41,200,193,232,3,131,192,1,252,255,
  165,233,248,26,255,85,87,86,83,131,252,236,28,139,108,36,48,139,76,36,52,
  190,237,49,192,141,188,253,36,233,139,157,233,129,195,239,137,189,233,137,
  68,36,24,137,68,36,52,56,133,233,15,132,244,249,199,131,233,237,136,133,233,
  139,149,233,139,133,233,41,200,193,232,3,131,192,1,41,209,139,114,252,252,
  137,68,36,20,252,247,198,237,15,132,244,17,252,233,244,18,248,27,85,87,86,
  83,131,252,236,28,190,237,255,252,233,244,247,248,28,85,87,86,83,131,252,
  236,28,190,237,248,1,139,108,36,48,139,76,36,52,248,2,139,189,233,137,124,
  36,52,137,108,36,24,137,165,233,139,157,233,129,195,239,248,3,199,131,233,
  237,139,149,233,1,206,41,214,139,133,233,41,200,193,232,3,131,192,1,139,105,
  252,248,129,121,253,252,252,239,15,133,244,29,252,255,165,233,248,30,255,
  85,87,86,83,131,252,236,28,139,108,36,48,139,68,36,56,139,76,36,52,139,84,
  36,60,137,108,36,24,139,189,233,43,189,233,199,68,36,60,0,0,0,0,137,124,36,
  56,137,68,36,8,137,76,36,4,137,44,36,139,189,233,137,124,36,52,137,165,233,
  252,255,210,133,192,15,132,244,21,137,193,190,237,252,233,244,2,248,25,1,
  209,131,230,252,248,137,213,41,252,242,199,68,193,252,252,237,137,200,139,
  117,252,244,139,77,252,240,139,122,252,248,139,191,233,139,191,233,252,255,
  225,248,31,15,182,78,252,255,131,252,237,16,141,12,202,41,252,233,15,132,
  244,32,252,247,217,193,252,233,3,137,76,36,8,139,72,4,139,0,137,77,4,137,
  69,0,137,108,36,4,252,233,244,33,248,34,137,68,36,16,199,68,36,20,237,255,
  141,68,36,16,128,126,252,252,235,15,133,244,247,141,139,233,137,41,199,65,
  4,237,137,205,252,233,244,248,248,35,15,182,70,252,254,255,252,242,15,42,
  192,252,242,15,17,68,36,16,255,137,68,36,12,219,68,36,12,221,92,36,16,255,
  141,68,36,16,252,233,244,247,248,36,15,182,70,252,254,141,4,194,248,1,15,
  182,110,252,255,141,44,252,234,248,2,137,108,36,4,139,108,36,48,137,68,36,
  8,137,44,36,137,149,233,137,116,36,24,232,251,1,1,139,149,233,133,192,15,
  132,244,249,248,32,15,182,78,252,253,139,104,4,139,0,137,108,202,4,137,4,
  202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,3,
  139,141,233,137,113,252,244,141,177,233,41,214,139,105,252,248,184,3,0,0,
  0,252,255,165,233,248,37,137,68,36,16,199,68,36,20,237,141,68,36,16,128,126,
  252,252,235,15,133,244,247,141,139,233,255,137,41,199,65,4,237,137,205,252,
  233,244,248,248,38,15,182,70,252,254,255,141,68,36,16,252,233,244,247,248,
  39,15,182,70,252,254,141,4,194,248,1,15,182,110,252,255,141,44,252,234,248,
  2,137,108,36,4,139,108,36,48,137,68,36,8,137,44,36,137,149,233,137,116,36,
  24,232,251,1,2,139,149,233,133,192,15,132,244,249,15,182,78,252,253,139,108,
  202,4,139,12,202,137,104,4,137,8,248,40,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,171,248,3,139,141,233,137,113,252,244,15,182,70,252,
  253,139,108,194,4,139,4,194,137,105,20,137,65,16,141,177,233,41,214,139,105,
  252,248,184,4,0,0,0,252,255,165,233,248,41,15,182,110,252,252,141,4,194,141,
  12,202,137,108,36,12,139,108,36,48,137,68,36,8,137,76,36,4,137,44,36,137,
  149,233,137,116,36,24,232,251,1,3,248,3,139,149,233,131,252,248,1,15,135,
  244,42,248,4,255,141,118,4,15,130,244,252,248,5,15,183,70,252,254,141,180,
  253,134,233,248,6,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,248,43,131,198,4,129,120,253,4,239,15,130,244,5,252,233,244,6,248,
  44,129,120,253,4,239,252,233,244,4,248,45,131,252,238,4,137,108,36,12,139,
  108,36,48,137,68,36,8,137,76,36,4,137,44,36,137,149,233,137,116,36,24,232,
  251,1,4,252,233,244,3,248,46,255,141,4,199,252,233,244,247,248,47,141,4,199,
  141,44,252,234,149,252,233,244,248,248,48,141,4,194,137,197,252,233,244,248,
  248,49,141,4,194,248,1,141,44,252,234,248,2,141,12,202,137,108,36,8,139,108,
  36,48,137,68,36,12,15,182,70,252,252,137,76,36,4,137,68,36,16,137,44,36,137,
  149,233,137,116,36,24,232,251,1,5,139,149,233,133,192,15,132,244,40,248,42,
  137,193,41,208,137,113,252,244,141,176,233,139,105,252,248,184,3,0,0,0,129,
  121,253,252,252,239,15,133,244,29,255,252,255,165,233,248,50,139,108,36,48,
  137,149,233,141,20,194,137,252,233,137,116,36,24,232,251,1,6,139,149,233,
  252,233,244,42,248,29,137,76,36,20,137,68,36,16,131,252,233,8,141,4,193,139,
  108,36,48,137,76,36,4,137,68,36,8,137,44,36,137,149,233,137,116,36,24,232,
  251,1,7,139,149,233,139,76,36,20,139,68,36,16,139,105,252,248,131,192,1,57,
  215,15,132,244,51,252,255,165,233,248,52,139,108,36,48,137,149,233,137,202,
  137,252,233,137,116,36,24,232,251,1,8,139,149,233,139,70,252,252,15,182,204,
  15,182,232,193,232,16,252,255,164,253,171,233,248,53,129,252,248,239,15,130,
  244,54,255,139,105,4,129,252,253,239,15,131,244,54,137,68,36,20,137,105,252,
  252,139,41,137,105,252,248,131,232,2,15,132,244,248,137,76,36,16,248,1,131,
  193,8,139,105,4,137,105,252,252,139,41,137,105,252,248,131,232,1,15,133,244,
  1,139,76,36,16,248,2,139,68,36,20,252,233,244,55,248,56,129,252,248,239,15,
  130,244,54,139,105,4,184,237,252,247,213,57,232,255,15,71,197,255,15,134,
  244,247,137,232,248,1,255,139,105,252,248,139,132,253,197,233,199,65,252,
  252,237,137,65,252,248,252,233,244,57,248,58,129,252,248,239,15,130,244,54,
  139,105,4,129,252,253,239,15,133,244,252,248,1,139,41,139,173,233,248,2,133,
  252,237,199,65,252,252,237,15,132,244,57,139,65,252,248,139,131,233,199,65,
  252,252,237,137,105,252,248,137,76,36,16,139,141,233,255,35,136,233,105,201,
  239,3,141,233,248,3,129,185,233,239,15,133,244,250,57,129,233,15,132,244,
  251,248,4,139,137,233,133,201,15,133,244,3,252,233,244,57,248,5,139,105,4,
  129,252,253,239,15,132,244,57,255,139,1,139,76,36,16,137,105,252,252,137,
  65,252,248,252,233,244,57,248,6,129,252,253,239,15,132,244,1,129,252,253,
  239,15,135,244,253,189,237,248,7,252,247,213,139,172,253,171,233,252,233,
  244,2,248,59,129,252,248,239,15,130,244,54,129,121,253,4,239,15,133,244,54,
  255,139,41,131,189,233,0,15,133,244,54,129,121,253,12,239,15,133,244,54,139,
  65,8,137,133,233,199,65,252,252,237,137,105,252,248,252,246,133,233,235,15,
  132,244,247,128,165,233,235,139,131,233,137,171,233,137,133,233,248,1,252,
  233,244,57,248,60,255,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  133,244,54,139,1,139,108,36,48,137,68,36,4,137,44,36,137,205,137,84,36,16,
  131,193,8,137,76,36,8,232,251,1,9,137,252,233,139,84,36,16,139,40,139,64,
  4,137,105,252,248,137,65,252,252,252,233,244,57,248,61,129,252,248,239,15,
  133,244,54,129,121,253,4,239,15,135,244,54,255,252,242,15,16,1,252,233,244,
  62,255,221,1,252,233,244,63,255,248,64,129,252,248,239,15,130,244,54,129,
  121,253,4,239,15,133,244,249,139,1,248,2,199,65,252,252,237,137,65,252,248,
  252,233,244,57,248,3,129,121,253,4,239,15,135,244,54,131,187,233,0,15,133,
  244,54,139,171,233,59,171,233,255,15,130,244,247,232,244,65,248,1,139,108,
  36,48,137,141,233,137,113,252,252,137,116,36,24,137,84,36,16,137,202,137,
  252,233,232,251,1,10,139,141,233,139,84,36,16,252,233,244,2,248,66,129,252,
  248,239,15,130,244,54,15,132,244,248,248,1,129,121,253,4,239,15,133,244,54,
  139,41,137,108,36,4,139,108,36,48,137,44,36,137,141,233,255,137,113,252,252,
  137,84,36,16,131,193,8,137,76,36,8,137,116,36,24,232,251,1,11,139,141,233,
  139,84,36,16,133,192,15,132,244,249,139,105,8,139,65,12,137,105,252,248,137,
  65,252,252,139,105,16,139,65,20,137,41,137,65,4,248,67,184,237,252,233,244,
  68,248,2,199,65,12,237,252,233,244,1,248,3,199,65,252,252,237,252,233,244,
  57,248,69,129,252,248,239,15,130,244,54,129,121,253,4,239,255,15,133,244,
  54,139,133,233,199,65,252,252,237,137,65,252,248,199,65,12,237,184,237,252,
  233,244,68,248,70,129,252,248,239,15,130,244,54,129,121,253,4,239,15,133,
  244,54,129,121,253,12,239,15,135,244,54,255,252,242,15,16,65,8,189,0,0,252,
  240,63,102,15,110,205,102,15,112,201,81,252,242,15,88,193,252,242,15,45,192,
  252,242,15,17,65,252,248,255,221,65,8,217,232,222,193,219,20,36,221,89,252,
  248,139,4,36,255,139,41,59,133,233,15,131,244,248,193,224,3,3,133,233,248,
  1,129,120,253,4,239,15,132,244,71,139,40,139,64,4,137,41,137,65,4,252,233,
  244,67,248,2,131,189,233,0,15,132,244,71,137,84,36,16,135,205,137,194,232,
  251,1,12,137,252,233,139,84,36,16,133,192,15,133,244,1,248,71,184,237,252,
  233,244,68,248,72,255,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  133,244,54,139,133,233,199,65,252,252,237,137,65,252,248,255,15,87,192,252,
  242,15,17,65,8,255,217,252,238,221,89,8,255,184,237,252,233,244,68,248,73,
  129,252,248,239,15,130,244,54,137,113,252,252,190,237,137,202,131,193,8,131,
  232,1,139,105,252,248,248,1,252,246,131,233,235,15,133,244,249,248,2,129,
  121,253,252,252,239,15,133,244,29,252,255,165,233,248,3,131,198,1,252,233,
  244,2,248,74,255,129,252,248,239,15,130,244,54,129,121,253,12,239,15,133,
  244,54,137,113,252,252,139,105,4,137,105,12,199,65,4,237,139,41,139,113,8,
  137,105,8,137,49,190,237,137,202,129,193,239,131,232,2,252,233,244,1,248,
  9,139,116,36,24,252,233,244,54,248,75,129,252,248,239,15,130,244,54,139,41,
  137,113,252,252,137,116,36,24,137,44,36,129,121,253,4,239,15,133,244,9,255,
  131,189,233,0,15,133,244,9,128,189,233,235,15,135,244,9,139,181,233,137,116,
  36,4,15,132,244,247,59,181,233,15,132,244,9,248,1,141,116,198,252,240,59,
  181,233,15,135,244,9,137,181,233,139,108,36,48,137,141,233,131,193,8,137,
  141,233,255,139,108,36,4,141,76,193,232,41,252,241,57,252,238,15,132,244,
  249,248,2,139,68,14,4,137,70,252,252,139,4,14,137,70,252,248,131,252,238,
  8,57,252,238,15,133,244,2,248,3,49,201,137,76,36,12,137,76,36,8,232,244,26,
  199,131,233,237,139,108,36,48,139,52,36,139,149,233,129,252,248,239,15,135,
  244,254,248,4,139,142,233,139,190,233,137,142,233,137,252,254,41,206,15,132,
  244,252,255,141,4,50,193,252,238,3,59,133,233,15,135,244,255,137,213,41,205,
  248,5,139,1,137,4,41,139,65,4,137,68,41,4,131,193,8,57,252,249,15,133,244,
  5,248,6,141,70,2,199,66,252,252,237,248,7,139,116,36,24,137,68,36,20,185,
  252,248,252,255,252,255,252,255,252,247,198,237,15,132,244,17,252,233,244,
  18,248,8,199,66,252,252,237,139,142,233,131,252,233,8,137,142,233,139,1,137,
  2,139,65,4,137,66,4,184,237,252,233,244,7,248,9,255,139,12,36,137,185,233,
  137,252,242,137,252,233,232,251,1,0,139,149,233,252,233,244,4,248,9,139,116,
  36,24,252,233,244,54,248,76,139,173,233,137,113,252,252,137,116,36,24,137,
  44,36,131,189,233,0,15,133,244,9,128,189,233,235,15,135,244,9,139,181,233,
  137,116,36,4,15,132,244,247,59,181,233,255,15,132,244,9,248,1,141,116,198,
  252,248,59,181,233,15,135,244,9,137,181,233,139,108,36,48,137,141,233,137,
  141,233,139,108,36,4,141,76,193,252,240,41,252,241,57,252,238,15,132,244,
  249,248,2,139,68,14,4,137,70,252,252,139,4,14,137,70,252,248,131,252,238,
  8,57,252,238,15,133,244,2,248,3,49,201,137,76,36,12,137,76,36,8,232,244,26,
  199,131,233,237,139,108,36,48,139,52,36,139,149,233,255,129,252,248,239,15,
  135,244,254,248,4,139,142,233,139,190,233,137,142,233,137,252,254,41,206,
  15,132,244,252,141,4,50,193,252,238,3,59,133,233,15,135,244,255,137,213,41,
  205,248,5,139,1,137,4,41,139,65,4,137,68,41,4,131,193,8,57,252,249,15,133,
  244,5,248,6,141,70,1,248,7,139,116,36,24,137,68,36,20,49,201,252,247,198,
  237,15,132,244,17,255,252,233,244,18,248,8,137,252,242,137,252,233,232,251,
  1,13,248,9,139,12,36,137,185,233,137,252,242,137,252,233,232,251,1,0,139,
  149,233,252,233,244,4,248,77,139,108,36,48,137,113,252,252,252,247,133,233,
  237,15,132,244,54,137,141,233,141,68,193,252,248,137,133,233,49,192,137,133,
  233,176,235,136,133,233,252,233,244,22,255,248,63,221,89,252,248,252,233,
  244,57,248,78,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,
  54,252,242,15,16,1,102,15,252,239,201,102,15,118,201,102,15,115,209,1,15,
  84,193,248,62,252,242,15,17,65,252,248,255,248,78,129,252,248,239,15,130,
  244,54,129,121,253,4,239,15,135,244,54,221,1,217,225,248,62,248,63,221,89,
  252,248,255,248,57,184,237,248,68,137,68,36,20,248,55,252,247,198,237,15,
  133,244,253,248,5,56,70,252,255,15,135,244,252,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,171,248,6,199,68,193,252,244,237,131,192,
  1,252,233,244,5,248,7,137,202,185,252,248,252,255,252,255,252,255,252,233,
  244,18,255,248,79,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,
  244,54,252,242,15,81,1,252,233,244,62,248,80,129,252,248,239,15,130,244,54,
  129,121,253,4,239,15,135,244,54,252,242,15,16,1,232,244,81,252,233,244,62,
  248,82,255,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,
  252,242,15,16,1,232,244,83,252,233,244,62,255,248,79,129,252,248,239,15,130,
  244,54,129,121,253,4,239,15,135,244,54,221,1,217,252,250,252,233,244,63,248,
  80,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,1,232,
  244,81,252,233,244,63,248,82,255,129,252,248,239,15,130,244,54,129,121,253,
  4,239,15,135,244,54,221,1,232,244,83,252,233,244,63,255,248,84,129,252,248,
  239,15,130,244,54,129,121,253,4,239,15,135,244,54,217,252,237,221,1,217,252,
  241,252,233,244,63,248,85,129,252,248,239,15,130,244,54,129,121,253,4,239,
  15,135,244,54,217,252,236,221,1,217,252,241,252,233,244,63,248,86,129,252,
  248,239,255,15,130,244,54,129,121,253,4,239,15,135,244,54,221,1,232,244,87,
  252,233,244,63,248,88,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  135,244,54,221,1,217,252,254,252,233,244,63,248,89,129,252,248,239,255,15,
  130,244,54,129,121,253,4,239,15,135,244,54,221,1,217,252,255,252,233,244,
  63,248,90,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,
  1,217,252,242,221,216,252,233,244,63,248,91,129,252,248,239,15,130,244,54,
  255,129,121,253,4,239,15,135,244,54,221,1,217,192,216,200,217,232,222,225,
  217,252,250,217,252,243,252,233,244,63,248,92,129,252,248,239,15,130,244,
  54,129,121,253,4,239,15,135,244,54,221,1,217,192,216,200,217,232,222,225,
  217,252,250,217,201,217,252,243,252,233,244,63,248,93,129,252,248,239,15,
  130,244,54,129,121,253,4,239,15,135,244,54,255,221,1,217,232,217,252,243,
  252,233,244,63,255,248,94,129,252,248,239,15,130,244,54,129,121,253,4,239,
  15,135,244,54,252,242,15,16,1,252,242,15,17,4,36,255,248,94,129,252,248,239,
  15,130,244,54,129,121,253,4,239,15,135,244,54,221,1,221,28,36,255,137,76,
  36,16,137,213,232,251,1,14,139,76,36,16,137,252,234,252,233,244,63,255,248,
  95,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,252,242,
  15,16,1,252,242,15,17,4,36,255,248,95,129,252,248,239,15,130,244,54,129,121,
  253,4,239,15,135,244,54,221,1,221,28,36,255,137,76,36,16,137,213,232,251,
  1,15,139,76,36,16,137,252,234,252,233,244,63,255,248,96,129,252,248,239,15,
  130,244,54,129,121,253,4,239,15,135,244,54,252,242,15,16,1,252,242,15,17,
  4,36,255,248,96,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,
  54,221,1,221,28,36,255,137,76,36,16,137,213,232,251,1,16,139,76,36,16,137,
  252,234,252,233,244,63,248,97,255,248,98,129,252,248,239,15,130,244,54,129,
  121,253,4,239,15,135,244,54,252,242,15,16,1,252,242,15,89,133,233,252,233,
  244,62,255,248,98,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,
  244,54,221,1,220,141,233,252,233,244,63,255,248,99,129,252,248,239,15,130,
  244,54,129,121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,244,54,221,
  1,221,65,8,217,252,243,252,233,244,63,248,100,129,252,248,239,15,130,244,
  54,129,121,253,4,239,15,135,244,54,129,121,253,12,239,255,15,135,244,54,221,
  65,8,221,1,217,252,253,221,217,252,233,244,63,248,101,129,252,248,239,15,
  130,244,54,139,105,4,129,252,253,239,15,135,244,54,139,1,137,105,252,252,
  137,65,252,248,209,229,129,252,253,0,0,224,252,255,15,131,244,249,9,232,15,
  132,244,249,184,252,254,3,0,0,129,252,253,0,0,32,0,15,130,244,250,248,1,193,
  252,237,21,41,197,255,252,242,15,42,197,255,137,108,36,16,219,68,36,16,255,
  139,105,252,252,129,229,252,255,252,255,15,128,129,205,0,0,224,63,137,105,
  252,252,248,2,255,252,242,15,17,1,255,221,25,255,184,237,252,233,244,68,248,
  3,255,15,87,192,252,233,244,2,255,217,252,238,252,233,244,2,255,252,242,15,
  16,1,189,0,0,80,67,102,15,110,205,102,15,112,201,81,252,242,15,89,193,252,
  242,15,17,65,252,248,255,221,1,199,68,36,16,0,0,128,90,216,76,36,16,221,89,
  252,248,255,139,105,252,252,184,52,4,0,0,209,229,252,233,244,1,255,248,102,
  129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,252,242,15,
  16,1,255,248,102,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,
  54,221,1,255,139,105,4,209,229,129,252,253,0,0,224,252,255,15,132,244,250,
  255,15,40,224,232,244,103,252,242,15,92,224,248,1,252,242,15,17,65,252,248,
  252,242,15,17,33,255,217,192,232,244,103,220,252,233,248,1,221,89,252,248,
  221,25,255,139,65,252,252,139,105,4,49,232,15,136,244,249,248,2,184,237,252,
  233,244,68,248,3,129,252,245,0,0,0,128,137,105,4,252,233,244,2,248,4,255,
  15,87,228,252,233,244,1,255,217,252,238,217,201,252,233,244,1,255,248,104,
  129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,253,
  12,239,15,135,244,54,221,65,8,221,1,248,1,217,252,248,223,224,158,15,138,
  244,1,221,217,252,233,244,63,255,248,105,129,252,248,239,15,130,244,54,129,
  121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,244,54,252,242,15,16,
  1,252,242,15,16,73,8,232,244,106,252,233,244,62,255,248,105,129,252,248,239,
  15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,244,
  54,221,1,221,65,8,232,244,106,252,233,244,63,255,248,107,129,252,248,239,
  15,130,244,54,129,121,253,4,239,15,135,244,54,252,242,15,16,1,189,2,0,0,0,
  248,1,57,197,15,131,244,62,129,124,253,252,233,252,252,239,15,135,244,54,
  252,242,15,16,76,252,233,252,248,252,242,15,93,193,131,197,1,252,233,244,
  1,255,248,107,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,
  54,221,1,189,2,0,0,0,248,1,57,197,15,131,244,63,129,124,253,252,233,252,252,
  239,15,135,244,251,221,68,252,233,252,248,255,219,252,233,219,209,221,217,
  255,80,221,225,223,224,252,246,196,1,15,132,244,248,217,201,248,2,221,216,
  88,255,248,108,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,
  54,252,242,15,16,1,189,2,0,0,0,248,1,57,197,15,131,244,62,129,124,253,252,
  233,252,252,239,15,135,244,54,252,242,15,16,76,252,233,252,248,252,242,15,
  95,193,131,197,1,252,233,244,1,255,248,108,129,252,248,239,15,130,244,54,
  129,121,253,4,239,15,135,244,54,221,1,189,2,0,0,0,248,1,57,197,15,131,244,
  63,129,124,253,252,233,252,252,239,15,135,244,251,221,68,252,233,252,248,
  255,219,252,233,218,209,221,217,255,80,221,225,223,224,252,246,196,1,15,133,
  244,248,217,201,248,2,221,216,88,255,248,5,221,216,252,233,244,54,255,248,
  109,129,252,248,239,15,130,244,54,129,121,253,4,239,15,133,244,54,139,41,
  255,252,242,15,42,133,233,252,233,244,62,255,219,133,233,252,233,244,63,255,
  248,110,129,252,248,239,15,133,244,54,129,121,253,4,239,15,133,244,54,139,
  41,131,189,233,1,15,130,244,71,15,182,173,233,255,252,242,15,42,197,252,233,
  244,62,255,137,108,36,16,219,68,36,16,252,233,244,63,255,248,111,139,171,
  233,59,171,233,15,130,244,247,232,244,65,248,1,129,252,248,239,15,133,244,
  54,129,121,253,4,239,15,135,244,54,255,252,242,15,45,1,61,252,255,0,0,0,15,
  135,244,54,137,68,36,20,255,221,1,219,92,36,20,129,124,36,20,252,255,0,0,
  0,15,135,244,54,255,141,68,36,20,137,76,36,16,199,68,36,8,1,0,0,0,137,68,
  36,4,248,112,139,108,36,48,137,44,36,137,116,36,24,137,149,233,232,251,1,
  17,139,76,36,16,139,149,233,199,65,252,252,237,137,65,252,248,252,233,244,
  57,248,113,139,171,233,59,171,233,15,130,244,247,232,244,65,248,1,137,76,
  36,16,199,68,36,20,252,255,252,255,252,255,252,255,129,252,248,239,15,130,
  244,54,15,134,244,247,129,121,253,20,239,255,252,242,15,45,105,16,137,108,
  36,20,255,221,65,16,219,92,36,20,255,248,1,129,121,253,4,239,15,133,244,54,
  129,121,253,12,239,15,135,244,54,139,41,137,108,36,4,139,173,233,255,252,
  242,15,45,65,8,137,68,36,8,255,221,65,8,219,92,36,8,255,139,68,36,20,57,197,
  15,130,244,251,248,2,139,76,36,8,133,201,15,142,244,253,248,3,139,108,36,
  4,41,200,15,140,244,114,141,172,253,13,233,131,192,1,248,4,137,108,36,4,137,
  68,36,8,252,233,244,112,248,5,15,140,244,252,141,68,40,1,252,233,244,2,248,
  6,137,232,252,233,244,2,248,7,255,15,132,244,254,1,252,233,131,193,1,15,143,
  244,3,248,8,185,1,0,0,0,252,233,244,3,248,114,49,192,252,233,244,4,248,115,
  129,252,248,239,15,130,244,54,139,171,233,59,171,233,15,130,244,247,232,244,
  65,248,1,255,137,76,36,16,129,121,253,4,239,15,133,244,54,129,121,253,12,
  239,15,135,244,54,139,41,255,252,242,15,45,65,8,255,221,65,8,219,92,36,20,
  139,68,36,20,255,133,192,15,142,244,114,131,189,233,1,15,130,244,114,15,133,
  244,116,57,131,233,15,130,244,116,15,182,141,233,139,171,233,137,68,36,8,
  137,108,36,4,248,1,136,77,0,131,197,1,131,232,1,15,133,244,1,252,233,244,
  112,248,117,129,252,248,239,15,130,244,54,255,139,171,233,59,171,233,15,130,
  244,247,232,244,65,248,1,137,76,36,16,129,121,253,4,239,15,133,244,54,139,
  41,139,133,233,133,192,15,132,244,114,57,131,233,15,130,244,118,129,197,239,
  137,116,36,20,137,68,36,8,139,179,233,137,116,36,4,248,1,15,182,77,0,131,
  197,1,131,232,1,136,12,6,15,133,244,1,255,139,116,36,20,252,233,244,112,248,
  119,129,252,248,239,15,130,244,54,139,171,233,59,171,233,15,130,244,247,232,
  244,65,248,1,137,76,36,16,129,121,253,4,239,15,133,244,54,139,41,139,133,
  233,57,131,233,15,130,244,118,255,129,197,239,137,116,36,20,137,68,36,8,139,
  179,233,137,116,36,4,252,233,244,249,248,1,15,182,76,5,0,131,252,249,65,15,
  130,244,248,131,252,249,90,15,135,244,248,131,252,241,32,248,2,136,12,6,248,
  3,131,232,1,15,137,244,1,139,116,36,20,252,233,244,112,248,120,129,252,248,
  239,15,130,244,54,139,171,233,255,59,171,233,15,130,244,247,232,244,65,248,
  1,137,76,36,16,129,121,253,4,239,15,133,244,54,139,41,139,133,233,57,131,
  233,15,130,244,118,129,197,239,137,116,36,20,137,68,36,8,139,179,233,137,
  116,36,4,252,233,244,249,248,1,15,182,76,5,0,131,252,249,97,15,130,244,248,
  255,131,252,249,122,15,135,244,248,131,252,241,32,248,2,136,12,6,248,3,131,
  232,1,15,137,244,1,139,116,36,20,252,233,244,112,248,121,129,252,248,239,
  15,130,244,54,129,121,253,4,239,15,133,244,54,137,84,36,16,137,205,139,9,
  232,251,1,18,137,252,233,139,84,36,16,255,252,242,15,42,192,252,233,244,62,
  255,137,4,36,219,4,36,252,233,244,63,255,248,122,129,252,248,239,15,130,244,
  54,129,121,253,4,239,15,135,244,54,252,242,15,16,1,189,0,0,56,67,102,15,110,
  205,102,15,112,201,81,252,242,15,88,193,102,15,126,197,252,242,15,42,197,
  252,233,244,62,255,248,122,129,252,248,239,15,130,244,54,129,121,253,4,239,
  15,135,244,54,221,1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,219,4,
  36,252,233,244,63,255,248,123,129,252,248,239,15,130,244,54,129,121,253,4,
  239,15,135,244,54,252,242,15,16,1,189,0,0,56,67,102,15,110,205,102,15,112,
  201,81,252,242,15,88,193,102,15,126,197,255,248,123,129,252,248,239,15,130,
  244,54,129,121,253,4,239,15,135,244,54,221,1,199,68,36,16,0,0,192,89,216,
  68,36,16,221,28,36,139,44,36,255,137,68,36,20,141,68,193,252,240,255,137,
  84,36,16,255,248,1,57,200,15,134,244,124,129,120,253,4,239,15,135,244,125,
  255,252,242,15,16,0,252,242,15,88,193,102,15,126,194,33,213,255,221,0,216,
  68,36,16,221,28,36,35,44,36,255,131,232,8,252,233,244,1,255,248,126,129,252,
  248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,252,242,15,16,1,189,
  0,0,56,67,102,15,110,205,102,15,112,201,81,252,242,15,88,193,102,15,126,197,
  255,248,126,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,
  221,1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,139,44,36,255,252,242,
  15,16,0,252,242,15,88,193,102,15,126,194,9,213,255,221,0,216,68,36,16,221,
  28,36,11,44,36,255,248,127,129,252,248,239,15,130,244,54,129,121,253,4,239,
  15,135,244,54,252,242,15,16,1,189,0,0,56,67,102,15,110,205,102,15,112,201,
  81,252,242,15,88,193,102,15,126,197,255,248,127,129,252,248,239,15,130,244,
  54,129,121,253,4,239,15,135,244,54,221,1,199,68,36,16,0,0,192,89,216,68,36,
  16,221,28,36,139,44,36,255,252,242,15,16,0,252,242,15,88,193,102,15,126,194,
  49,213,255,221,0,216,68,36,16,221,28,36,51,44,36,255,248,128,129,252,248,
  239,15,130,244,54,129,121,253,4,239,15,135,244,54,252,242,15,16,1,189,0,0,
  56,67,102,15,110,205,102,15,112,201,81,252,242,15,88,193,102,15,126,197,255,
  248,128,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,221,
  1,199,68,36,16,0,0,192,89,216,68,36,16,221,28,36,139,44,36,255,15,205,252,
  233,244,129,255,248,130,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  135,244,54,252,242,15,16,1,189,0,0,56,67,102,15,110,205,102,15,112,201,81,
  252,242,15,88,193,102,15,126,197,255,248,130,129,252,248,239,15,130,244,54,
  129,121,253,4,239,15,135,244,54,221,1,199,68,36,16,0,0,192,89,216,68,36,16,
  221,28,36,139,44,36,255,252,247,213,255,248,129,252,242,15,42,197,252,233,
  244,62,248,124,252,242,15,42,197,139,84,36,16,252,233,244,62,255,248,129,
  248,124,137,44,36,219,4,36,252,233,244,63,255,248,125,255,139,68,36,20,252,
  233,244,54,255,248,131,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  135,244,54,129,121,253,12,239,15,135,244,54,252,242,15,16,1,252,242,15,16,
  73,8,189,0,0,56,67,102,15,110,213,102,15,112,210,81,252,242,15,88,194,252,
  242,15,88,202,137,200,102,15,126,197,102,15,126,201,255,248,131,129,252,248,
  239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,
  244,54,221,1,221,65,8,199,68,36,16,0,0,192,89,216,68,36,16,221,92,36,8,216,
  68,36,16,221,28,36,137,200,139,76,36,8,139,44,36,255,211,229,137,193,252,
  233,244,129,255,248,132,129,252,248,239,15,130,244,54,129,121,253,4,239,15,
  135,244,54,129,121,253,12,239,15,135,244,54,252,242,15,16,1,252,242,15,16,
  73,8,189,0,0,56,67,102,15,110,213,102,15,112,210,81,252,242,15,88,194,252,
  242,15,88,202,137,200,102,15,126,197,102,15,126,201,255,248,132,129,252,248,
  239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,
  244,54,221,1,221,65,8,199,68,36,16,0,0,192,89,216,68,36,16,221,92,36,8,216,
  68,36,16,221,28,36,137,200,139,76,36,8,139,44,36,255,211,252,237,137,193,
  252,233,244,129,255,248,133,129,252,248,239,15,130,244,54,129,121,253,4,239,
  15,135,244,54,129,121,253,12,239,15,135,244,54,252,242,15,16,1,252,242,15,
  16,73,8,189,0,0,56,67,102,15,110,213,102,15,112,210,81,252,242,15,88,194,
  252,242,15,88,202,137,200,102,15,126,197,102,15,126,201,255,248,133,129,252,
  248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,253,12,239,
  15,135,244,54,221,1,221,65,8,199,68,36,16,0,0,192,89,216,68,36,16,221,92,
  36,8,216,68,36,16,221,28,36,137,200,139,76,36,8,139,44,36,255,211,252,253,
  137,193,252,233,244,129,255,248,134,129,252,248,239,15,130,244,54,129,121,
  253,4,239,15,135,244,54,129,121,253,12,239,15,135,244,54,252,242,15,16,1,
  252,242,15,16,73,8,189,0,0,56,67,102,15,110,213,102,15,112,210,81,252,242,
  15,88,194,252,242,15,88,202,137,200,102,15,126,197,102,15,126,201,255,248,
  134,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,
  253,12,239,15,135,244,54,221,1,221,65,8,199,68,36,16,0,0,192,89,216,68,36,
  16,221,92,36,8,216,68,36,16,221,28,36,137,200,139,76,36,8,139,44,36,255,211,
  197,137,193,252,233,244,129,255,248,135,129,252,248,239,15,130,244,54,129,
  121,253,4,239,15,135,244,54,129,121,253,12,239,15,135,244,54,252,242,15,16,
  1,252,242,15,16,73,8,189,0,0,56,67,102,15,110,213,102,15,112,210,81,252,242,
  15,88,194,252,242,15,88,202,137,200,102,15,126,197,102,15,126,201,255,248,
  135,129,252,248,239,15,130,244,54,129,121,253,4,239,15,135,244,54,129,121,
  253,12,239,15,135,244,54,221,1,221,65,8,199,68,36,16,0,0,192,89,216,68,36,
  16,221,92,36,8,216,68,36,16,221,28,36,137,200,139,76,36,8,139,44,36,255,211,
  205,137,193,252,233,244,129,248,116,184,237,252,233,244,54,248,118,184,237,
  248,54,139,108,36,48,41,202,137,113,252,252,137,116,36,24,137,84,36,16,137,
  141,233,141,68,193,252,248,141,144,233,137,133,233,139,65,252,248,59,149,
  233,15,135,244,251,137,44,36,252,255,144,233,133,192,15,133,244,249,248,1,
  139,141,233,255,139,133,233,41,200,193,232,3,131,192,1,139,105,252,248,139,
  84,36,16,1,202,57,113,252,252,15,133,244,248,252,255,165,233,248,2,129,121,
  253,252,252,239,15,133,244,29,252,255,165,233,248,3,139,141,233,139,84,36,
  16,1,202,252,233,244,68,248,5,186,237,137,252,233,232,251,1,0,252,233,244,
  1,248,65,93,137,108,36,16,139,108,36,48,41,202,137,84,36,20,137,113,252,252,
  137,116,36,24,137,141,233,141,68,193,252,248,137,252,233,137,133,233,255,
  232,251,1,19,139,141,233,139,133,233,41,200,193,232,3,131,192,1,139,113,252,
  252,139,84,36,20,1,202,139,108,36,16,85,139,105,252,248,195,248,136,255,15,
  182,131,233,168,235,15,133,244,251,168,235,15,133,244,247,168,235,15,132,
  244,247,252,255,139,233,252,233,244,247,255,248,137,15,182,131,233,168,235,
  15,133,244,251,168,235,15,132,244,251,252,255,139,233,15,132,244,247,168,
  235,15,132,244,251,248,1,139,108,36,48,139,68,36,20,137,68,36,8,137,149,233,
  137,116,36,4,137,44,36,232,251,1,20,248,4,139,149,233,15,182,78,252,253,248,
  5,15,182,110,252,252,15,183,70,252,254,252,255,164,253,171,233,248,138,255,
  139,108,36,48,137,149,233,137,252,242,141,139,233,137,171,233,137,116,36,
  24,232,251,1,21,252,233,244,4,255,248,139,255,139,108,36,48,137,149,233,137,
  252,242,141,139,233,137,171,233,137,116,36,24,232,251,1,21,139,149,233,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,248,140,255,
  85,141,108,36,12,85,83,82,81,80,15,182,69,252,252,138,101,252,248,137,125,
  252,252,137,117,252,248,139,93,0,139,139,233,199,131,233,237,137,131,233,
  137,139,233,129,252,236,239,252,247,131,233,237,15,132,244,247,252,242,15,
  17,125,216,252,242,15,17,117,208,252,242,15,17,109,200,252,242,15,17,101,
  192,252,242,15,17,93,184,252,242,15,17,85,176,252,242,15,17,77,168,252,242,
  15,17,69,160,248,1,139,171,233,139,147,233,137,171,233,137,149,233,141,84,
  36,16,141,139,233,232,251,1,22,137,196,139,149,233,139,116,36,24,137,108,
  36,48,255,248,141,255,139,122,252,248,139,191,233,139,191,233,199,131,233,
  0,0,0,0,199,131,233,237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,
  252,255,36,171,255,248,81,255,217,124,36,4,137,68,36,8,102,184,0,4,102,11,
  68,36,4,102,37,252,255,252,247,102,137,68,36,6,217,108,36,6,217,252,252,217,
  108,36,4,139,68,36,8,195,255,248,142,102,15,252,239,210,102,15,118,210,102,
  15,115,210,1,184,0,0,48,67,102,15,110,216,102,15,112,219,81,15,40,200,102,
  15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,252,
  242,15,92,203,102,15,86,202,184,0,0,252,240,63,102,15,110,208,102,15,112,
  210,81,252,242,15,194,193,1,102,15,84,194,252,242,15,92,200,15,40,193,248,
  1,195,248,83,255,217,124,36,4,137,68,36,8,102,184,0,8,102,11,68,36,4,102,
  37,252,255,252,251,102,137,68,36,6,217,108,36,6,217,252,252,217,108,36,4,
  139,68,36,8,195,255,248,143,102,15,252,239,210,102,15,118,210,102,15,115,
  210,1,184,0,0,48,67,102,15,110,216,102,15,112,219,81,15,40,200,102,15,84,
  202,102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,252,242,
  15,92,203,102,15,86,202,184,0,0,252,240,191,102,15,110,208,102,15,112,210,
  81,252,242,15,194,193,6,102,15,84,194,252,242,15,92,200,15,40,193,248,1,195,
  248,103,255,217,124,36,4,137,68,36,8,102,184,0,12,102,11,68,36,4,102,137,
  68,36,6,217,108,36,6,217,252,252,217,108,36,4,139,68,36,8,195,255,248,144,
  102,15,252,239,210,102,15,118,210,102,15,115,210,1,184,0,0,48,67,102,15,110,
  216,102,15,112,219,81,15,40,200,102,15,84,202,102,15,46,217,15,134,244,247,
  102,15,85,208,15,40,193,252,242,15,88,203,252,242,15,92,203,184,0,0,252,240,
  63,102,15,110,216,102,15,112,219,81,252,242,15,194,193,1,102,15,84,195,252,
  242,15,92,200,102,15,86,202,15,40,193,248,1,195,248,145,255,15,40,232,252,
  242,15,94,193,102,15,252,239,210,102,15,118,210,102,15,115,210,1,184,0,0,
  48,67,102,15,110,216,102,15,112,219,81,15,40,224,102,15,84,226,102,15,46,
  220,15,134,244,247,102,15,85,208,252,242,15,88,227,252,242,15,92,227,102,
  15,86,226,184,0,0,252,240,63,102,15,110,208,102,15,112,210,81,252,242,15,
  194,196,1,102,15,84,194,252,242,15,92,224,15,40,197,252,242,15,89,204,252,
  242,15,92,193,195,248,1,252,242,15,89,200,15,40,197,252,242,15,92,193,195,
  255,217,193,216,252,241,217,124,36,4,102,184,0,4,102,11,68,36,4,102,37,252,
  255,252,247,102,137,68,36,6,217,108,36,6,217,252,252,217,108,36,4,222,201,
  222,252,233,195,255,248,87,217,252,234,222,201,248,146,217,84,36,4,129,124,
  36,4,0,0,128,127,15,132,244,247,129,124,36,4,0,0,128,252,255,15,132,244,248,
  248,147,217,192,217,252,252,220,252,233,217,201,217,252,240,217,232,222,193,
  217,252,253,221,217,248,1,195,248,2,221,216,217,252,238,195,255,248,106,219,
  84,36,4,219,68,36,4,255,223,252,233,255,221,252,233,223,224,158,255,15,133,
  244,254,15,138,244,255,221,216,139,68,36,4,131,252,248,1,15,142,244,252,248,
  1,169,1,0,0,0,15,133,244,248,216,200,209,232,252,233,244,1,248,2,209,232,
  15,132,244,251,217,192,248,3,216,200,209,232,15,132,244,250,15,131,244,3,
  220,201,252,233,244,3,248,4,255,222,201,248,5,195,248,6,15,132,244,5,15,130,
  244,253,217,232,222,252,241,252,247,216,131,252,248,1,15,132,244,5,252,233,
  244,1,248,7,221,216,217,232,195,248,8,217,84,36,4,217,201,217,84,36,8,139,
  68,36,4,209,224,61,0,0,0,252,255,15,132,244,248,139,68,36,8,209,224,15,132,
  244,250,61,0,0,0,252,255,15,132,244,250,217,252,241,252,233,244,147,248,9,
  255,217,232,255,223,252,234,255,221,252,234,223,224,158,255,15,132,244,247,
  217,201,248,1,221,216,195,248,2,217,225,217,232,255,15,132,244,249,221,216,
  217,225,217,252,238,184,0,0,0,0,15,146,208,209,200,51,68,36,4,15,137,244,
  249,217,201,248,3,221,217,217,225,195,248,4,131,124,36,4,0,15,141,244,3,221,
  216,221,216,133,192,15,132,244,251,217,252,238,195,248,5,199,68,36,4,0,0,
  128,127,217,68,36,4,195,255,248,106,255,248,148,252,242,15,45,193,252,242,
  15,42,208,102,15,46,202,15,133,244,254,15,138,244,255,248,149,131,252,248,
  1,15,142,244,252,248,1,169,1,0,0,0,15,133,244,248,252,242,15,89,192,209,232,
  252,233,244,1,248,2,209,232,15,132,244,251,15,40,200,248,3,252,242,15,89,
  192,209,232,15,132,244,250,15,131,244,3,255,252,242,15,89,200,252,233,244,
  3,248,4,252,242,15,89,193,248,5,195,248,6,15,132,244,5,15,130,244,253,80,
  184,0,0,252,240,63,102,15,110,200,102,15,112,201,81,252,242,15,94,200,88,
  15,40,193,252,247,216,131,252,248,1,15,132,244,5,252,233,244,1,248,7,184,
  0,0,252,240,63,102,15,110,192,102,15,112,192,81,195,248,8,252,242,15,17,76,
  36,12,252,242,15,17,68,36,4,131,124,36,12,0,15,133,244,247,139,68,36,16,209,
  224,61,0,0,224,252,255,15,132,244,248,248,1,255,131,124,36,4,0,15,133,244,
  247,139,68,36,8,209,224,15,132,244,250,61,0,0,224,252,255,15,132,244,251,
  248,1,221,68,36,12,221,68,36,4,217,252,241,217,192,217,252,252,220,252,233,
  217,201,217,252,240,217,232,222,193,217,252,253,221,217,221,92,36,4,252,242,
  15,16,68,36,4,195,248,9,184,0,0,252,240,63,102,15,110,208,102,15,112,210,
  81,102,15,46,194,15,132,244,247,15,40,193,248,1,195,248,2,102,15,252,239,
  210,102,15,118,210,102,15,115,210,1,102,15,84,194,184,0,0,252,240,63,102,
  15,110,208,102,15,112,210,81,102,15,46,194,15,132,244,1,102,15,80,193,15,
  87,192,136,196,15,146,208,48,224,15,133,244,1,248,3,184,0,0,252,240,127,102,
  15,110,192,102,15,112,192,81,195,248,4,102,15,80,193,133,192,15,133,244,3,
  255,15,87,192,195,248,5,102,15,80,193,133,192,15,132,244,3,15,87,192,195,
  248,150,255,139,68,36,12,252,242,15,16,68,36,4,131,252,248,1,15,132,244,247,
  15,135,244,248,232,244,81,252,233,244,253,248,1,232,244,83,252,233,244,253,
  248,2,131,252,248,3,15,132,244,247,15,135,244,248,232,244,103,255,252,233,
  244,253,248,1,252,242,15,81,192,248,7,252,242,15,17,68,36,4,221,68,36,4,195,
  248,2,221,68,36,4,131,252,248,5,15,130,244,87,15,132,244,146,248,2,131,252,
  248,7,15,132,244,247,15,135,244,248,217,252,237,217,201,217,252,241,195,248,
  1,217,232,217,201,217,252,241,195,248,2,131,252,248,9,15,132,244,247,15,135,
  244,248,255,217,252,236,217,201,217,252,241,195,248,1,217,252,254,195,248,
  2,131,252,248,11,15,132,244,247,15,135,244,255,217,252,255,195,248,1,217,
  252,242,221,216,195,255,139,68,36,12,221,68,36,4,131,252,248,1,15,130,244,
  81,15,132,244,83,131,252,248,3,15,130,244,103,15,135,244,248,217,252,250,
  195,248,2,131,252,248,5,15,130,244,87,15,132,244,146,131,252,248,7,15,132,
  244,247,15,135,244,248,217,252,237,217,201,217,252,241,195,248,1,217,232,
  217,201,217,252,241,195,248,2,131,252,248,9,15,132,244,247,255,15,135,244,
  248,217,252,236,217,201,217,252,241,195,248,1,217,252,254,195,248,2,131,252,
  248,11,15,132,244,247,15,135,244,255,217,252,255,195,248,1,217,252,242,221,
  216,195,255,248,9,204,248,151,255,139,68,36,20,252,242,15,16,68,36,4,252,
  242,15,16,76,36,12,131,252,248,1,15,132,244,247,15,135,244,248,252,242,15,
  88,193,248,7,252,242,15,17,68,36,4,221,68,36,4,195,248,1,252,242,15,92,193,
  252,233,244,7,248,2,131,252,248,3,15,132,244,247,15,135,244,248,252,242,15,
  89,193,252,233,244,7,248,1,252,242,15,94,193,252,233,244,7,248,2,131,252,
  248,5,15,132,244,247,255,15,135,244,248,232,244,145,252,233,244,7,248,1,90,
  232,244,106,82,252,233,244,7,248,2,131,252,248,7,15,132,244,247,15,135,244,
  248,184,0,0,0,128,102,15,110,200,102,15,112,201,81,15,87,193,252,233,244,
  7,248,1,102,15,252,239,201,102,15,118,201,102,15,115,209,1,15,84,193,252,
  233,244,7,248,2,255,131,252,248,9,15,135,244,248,221,68,36,4,221,68,36,12,
  15,132,244,247,217,252,243,195,248,1,217,201,217,252,253,221,217,195,248,
  2,131,252,248,11,15,132,244,247,15,135,244,255,252,242,15,93,193,252,233,
  244,7,248,1,252,242,15,95,193,252,233,244,7,248,9,204,255,139,68,36,20,221,
  68,36,4,221,68,36,12,131,252,248,1,15,132,244,247,15,135,244,248,222,193,
  195,248,1,222,252,233,195,248,2,131,252,248,3,15,132,244,247,15,135,244,248,
  222,201,195,248,1,222,252,249,195,248,2,131,252,248,5,15,130,244,145,15,132,
  244,106,131,252,248,7,15,132,244,247,15,135,244,248,255,221,216,217,224,195,
  248,1,221,216,217,225,195,248,2,131,252,248,9,15,132,244,247,15,135,244,248,
  217,252,243,195,248,1,217,201,217,252,253,221,217,195,248,2,131,252,248,11,
  15,132,244,247,15,135,244,255,255,219,252,233,219,209,221,217,195,248,1,219,
  252,233,218,209,221,217,195,255,221,225,223,224,252,246,196,1,15,132,244,
  248,217,201,248,2,221,216,195,248,1,221,225,223,224,252,246,196,1,15,133,
  244,248,217,201,248,2,221,216,195,255,248,152,156,90,137,209,129,252,242,
  0,0,32,0,82,157,156,90,49,192,57,209,15,132,244,247,139,68,36,4,87,83,15,
  162,139,124,36,16,137,7,137,95,4,137,79,8,137,87,12,91,95,248,1,195,255,249,
  255,129,124,253,202,4,239,15,135,244,41,129,124,253,194,4,239,15,135,244,
  41,255,252,242,15,16,4,194,131,198,4,102,15,46,4,202,255,221,4,202,221,4,
  194,131,198,4,255,223,252,233,221,216,255,218,252,233,223,224,158,255,15,
  134,244,248,255,15,131,244,248,255,248,1,15,183,70,252,254,141,180,253,134,
  233,248,2,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,
  255,139,108,194,4,131,198,4,129,252,253,239,15,135,244,251,129,124,253,202,
  4,239,15,135,244,251,255,252,242,15,16,4,194,102,15,46,4,202,255,221,4,202,
  221,4,194,255,15,138,244,248,15,133,244,248,255,15,138,244,248,15,132,244,
  247,255,248,1,15,183,70,252,254,141,180,253,134,233,248,2,255,248,2,15,183,
  70,252,254,141,180,253,134,233,248,1,255,248,5,57,108,202,4,15,133,244,2,
  129,252,253,239,15,131,244,1,139,12,202,139,4,194,57,193,15,132,244,1,129,
  252,253,239,15,135,244,2,139,169,233,133,252,237,15,132,244,2,252,246,133,
  233,235,15,133,244,2,255,49,252,237,255,189,1,0,0,0,255,252,233,244,45,255,
  252,247,208,131,198,4,129,124,253,202,4,239,15,133,244,248,139,12,202,59,
  12,135,255,131,198,4,129,124,253,202,4,239,15,135,244,248,255,252,242,15,
  16,4,199,102,15,46,4,202,255,221,4,202,221,4,199,255,252,247,208,131,198,
  4,57,68,202,4,255,139,108,194,4,131,198,4,129,252,253,239,255,15,131,244,
  247,255,15,130,244,247,255,137,108,202,4,139,44,194,137,44,202,255,15,183,
  70,252,254,141,180,253,134,233,248,1,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,171,255,139,108,194,4,139,4,194,137,108,202,4,137,
  4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,
  49,252,237,129,124,253,194,4,239,129,213,239,137,108,202,4,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,171,255,129,124,253,194,4,239,
  15,135,244,48,255,252,242,15,16,4,194,184,0,0,0,128,102,15,110,200,102,15,
  112,201,81,15,87,193,252,242,15,17,4,202,255,221,4,194,217,224,221,28,202,
  255,129,124,253,194,4,239,15,133,244,248,139,4,194,255,15,87,192,252,242,
  15,42,128,233,248,1,252,242,15,17,4,202,255,219,128,233,248,1,221,28,202,
  255,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,2,
  129,124,253,194,4,239,15,133,244,50,139,12,194,137,213,232,251,1,18,255,252,
  242,15,42,192,137,252,234,255,137,4,36,137,252,234,219,4,36,255,15,182,78,
  252,253,252,233,244,1,255,15,182,252,236,15,182,192,255,129,124,253,252,234,
  4,239,15,135,244,46,255,252,242,15,16,4,252,234,252,242,15,88,4,199,255,221,
  4,252,234,220,4,199,255,129,124,253,252,234,4,239,15,135,244,47,255,252,242,
  15,16,4,199,252,242,15,88,4,252,234,255,221,4,199,220,4,252,234,255,129,124,
  253,252,234,4,239,15,135,244,49,129,124,253,194,4,239,15,135,244,49,255,252,
  242,15,16,4,252,234,252,242,15,88,4,194,255,221,4,252,234,220,4,194,255,252,
  242,15,16,4,252,234,252,242,15,92,4,199,255,221,4,252,234,220,36,199,255,
  252,242,15,16,4,199,252,242,15,92,4,252,234,255,221,4,199,220,36,252,234,
  255,252,242,15,16,4,252,234,252,242,15,92,4,194,255,221,4,252,234,220,36,
  194,255,252,242,15,16,4,252,234,252,242,15,89,4,199,255,221,4,252,234,220,
  12,199,255,252,242,15,16,4,199,252,242,15,89,4,252,234,255,221,4,199,220,
  12,252,234,255,252,242,15,16,4,252,234,252,242,15,89,4,194,255,221,4,252,
  234,220,12,194,255,252,242,15,16,4,252,234,252,242,15,94,4,199,255,221,4,
  252,234,220,52,199,255,252,242,15,16,4,199,252,242,15,94,4,252,234,255,221,
  4,199,220,52,252,234,255,252,242,15,16,4,252,234,252,242,15,94,4,194,255,
  221,4,252,234,220,52,194,255,252,242,15,16,4,252,234,252,242,15,16,12,199,
  255,221,4,252,234,221,4,199,255,252,242,15,16,4,199,252,242,15,16,12,252,
  234,255,221,4,199,221,4,252,234,255,252,242,15,16,4,252,234,252,242,15,16,
  12,194,255,221,4,252,234,221,4,194,255,248,153,232,244,145,255,252,233,244,
  153,255,232,244,106,255,15,182,252,236,15,182,192,141,12,194,41,232,137,76,
  36,4,137,68,36,8,248,33,139,108,36,48,137,44,36,137,116,36,24,137,149,233,
  232,251,1,23,139,149,233,133,192,15,133,244,42,15,182,110,252,255,15,182,
  78,252,253,139,68,252,234,4,139,44,252,234,137,68,202,4,137,44,202,139,6,
  15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,252,247,208,
  139,4,135,199,68,202,4,237,137,4,202,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,171,255,15,191,192,252,242,15,42,192,252,242,15,17,
  4,202,255,223,70,252,254,221,28,202,255,252,242,15,16,4,199,252,242,15,17,
  4,202,255,221,4,199,221,28,202,255,252,247,208,137,68,202,4,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,141,76,202,12,141,
  68,194,4,189,237,137,105,252,248,248,1,137,41,131,193,8,57,193,15,134,244,
  1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,139,
  106,252,248,139,172,253,133,233,139,173,233,139,69,4,139,109,0,137,68,202,
  4,137,44,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,
  171,255,139,106,252,248,139,172,253,141,233,128,189,233,0,139,173,233,139,
  12,194,139,68,194,4,137,77,0,137,69,4,15,132,244,247,252,246,133,233,235,
  15,133,244,248,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,248,2,129,232,239,129,252,248,239,15,134,244,1,252,246,129,233,
  235,15,132,244,1,135,213,141,139,233,255,232,251,1,24,137,252,234,252,233,
  244,1,255,252,247,208,139,106,252,248,139,172,253,141,233,139,12,135,139,
  133,233,137,8,199,64,4,237,252,246,133,233,235,15,133,244,248,248,1,139,6,
  15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,2,252,246,129,
  233,235,15,132,244,1,128,189,233,0,15,132,244,1,137,213,137,194,141,139,233,
  232,251,1,24,137,252,234,252,233,244,1,255,139,106,252,248,255,252,242,15,
  16,4,199,255,139,172,253,141,233,139,141,233,255,252,247,208,139,106,252,
  248,139,172,253,141,233,139,141,233,137,65,4,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,171,255,141,180,253,134,233,139,108,36,48,
  131,189,233,0,15,132,244,247,137,149,233,141,20,202,137,252,233,232,251,1,
  25,139,149,233,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,255,252,247,208,139,74,252,248,139,4,135,139,108,36,48,137,76,
  36,8,137,68,36,4,137,116,36,24,137,44,36,137,149,233,232,251,1,26,139,149,
  233,15,182,78,252,253,137,4,202,199,68,202,4,237,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,171,255,137,197,37,252,255,7,0,0,193,
  252,237,11,61,252,255,7,0,0,15,148,209,137,108,36,8,1,200,139,108,36,48,1,
  200,137,68,36,4,137,116,36,24,139,139,233,137,44,36,59,139,233,137,149,233,
  15,131,244,248,248,1,232,251,1,27,139,149,233,15,182,78,252,253,137,4,202,
  199,68,202,4,237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,171,248,2,137,252,233,232,251,1,28,252,233,244,1,255,252,247,208,139,108,
  36,48,139,139,233,137,116,36,24,59,139,233,137,149,233,15,131,244,249,248,
  2,139,20,135,137,252,233,232,251,1,29,139,149,233,15,182,78,252,253,137,4,
  202,199,68,202,4,237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,248,3,137,252,233,232,251,1,28,15,183,70,252,254,252,247,208,252,
  233,244,2,255,252,247,208,139,106,252,248,139,173,233,139,4,135,252,233,244,
  154,255,252,247,208,139,106,252,248,139,173,233,139,4,135,252,233,244,155,
  255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,36,139,
  44,252,234,129,124,253,194,4,239,15,135,244,251,255,252,242,15,16,4,194,252,
  242,15,45,192,252,242,15,42,200,102,15,46,193,255,221,4,194,219,20,36,219,
  4,36,255,15,133,244,36,59,133,233,15,131,244,36,193,224,3,3,133,233,129,120,
  253,4,239,15,132,244,248,248,1,139,40,139,64,4,137,44,202,137,68,202,4,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,2,131,189,
  233,0,15,132,244,1,139,141,233,252,246,129,233,235,15,132,244,36,15,182,78,
  252,253,252,233,244,1,248,5,255,129,124,253,194,4,239,15,133,244,36,139,4,
  194,252,233,244,154,255,15,182,252,236,15,182,192,252,247,208,139,4,135,129,
  124,253,252,234,4,239,15,133,244,34,139,44,252,234,248,154,139,141,233,35,
  136,233,105,201,239,3,141,233,248,1,129,185,233,239,15,133,244,250,57,129,
  233,15,133,244,250,129,121,253,4,239,15,132,244,251,15,182,70,252,253,139,
  41,139,73,4,137,44,194,248,2,255,137,76,194,4,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,171,248,3,15,182,70,252,253,185,237,252,233,
  244,2,248,4,139,137,233,133,201,15,133,244,1,248,5,139,141,233,133,201,15,
  132,244,3,252,246,129,233,235,15,133,244,3,252,233,244,34,255,15,182,252,
  236,15,182,192,129,124,253,252,234,4,239,15,133,244,35,139,44,252,234,59,
  133,233,15,131,244,35,193,224,3,3,133,233,129,120,253,4,239,15,132,244,248,
  248,1,139,40,139,64,4,137,44,202,137,68,202,4,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,171,248,2,131,189,233,0,15,132,244,1,139,
  141,233,252,246,129,233,235,15,132,244,35,255,15,182,252,236,15,182,192,129,
  124,253,252,234,4,239,15,133,244,39,139,44,252,234,129,124,253,194,4,239,
  15,135,244,251,255,15,133,244,39,59,133,233,15,131,244,39,193,224,3,3,133,
  233,129,120,253,4,239,15,132,244,249,248,1,252,246,133,233,235,15,133,244,
  253,248,2,139,108,202,4,139,12,202,137,104,4,137,8,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,171,248,3,131,189,233,0,15,132,244,1,
  139,141,233,255,252,246,129,233,235,15,132,244,39,15,182,78,252,253,252,233,
  244,1,248,5,129,124,253,194,4,239,15,133,244,39,139,4,194,252,233,244,155,
  248,7,128,165,233,235,139,139,233,137,171,233,137,141,233,15,182,78,252,253,
  252,233,244,2,255,15,182,252,236,15,182,192,252,247,208,139,4,135,129,124,
  253,252,234,4,239,15,133,244,37,139,44,252,234,248,155,139,141,233,35,136,
  233,105,201,239,198,133,233,0,3,141,233,248,1,129,185,233,239,15,133,244,
  251,57,129,233,15,133,244,251,129,121,253,4,239,15,132,244,250,248,2,255,
  252,246,133,233,235,15,133,244,253,248,3,15,182,70,252,253,139,108,194,4,
  139,4,194,137,105,4,137,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,
  252,255,36,171,248,4,131,189,233,0,15,132,244,2,137,76,36,16,139,141,233,
  252,246,129,233,235,15,132,244,37,139,76,36,16,252,233,244,2,248,5,139,137,
  233,133,201,15,133,244,1,255,139,141,233,133,201,15,132,244,252,252,246,129,
  233,235,15,132,244,37,248,6,137,68,36,16,199,68,36,20,237,141,68,36,16,137,
  108,36,12,137,108,36,4,139,108,36,48,137,68,36,8,137,44,36,137,116,36,24,
  137,149,233,232,251,1,30,139,149,233,139,108,36,12,137,193,252,233,244,2,
  248,7,128,165,233,235,139,131,233,137,171,233,137,133,233,252,233,244,3,255,
  15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,38,139,44,
  252,234,59,133,233,15,131,244,38,193,224,3,3,133,233,129,120,253,4,239,15,
  132,244,249,248,1,252,246,133,233,235,15,133,244,253,248,2,139,108,202,4,
  139,12,202,137,104,4,137,8,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,171,248,3,131,189,233,0,15,132,244,1,255,139,141,233,252,246,
  129,233,235,15,132,244,38,15,182,78,252,253,252,233,244,1,248,7,128,165,233,
  235,139,139,233,137,171,233,137,141,233,15,182,78,252,253,252,233,244,2,255,
  137,124,36,16,255,221,4,199,219,92,36,12,255,248,1,141,12,202,139,105,252,
  248,252,246,133,233,235,15,133,244,253,248,2,139,68,36,20,255,252,242,15,
  45,252,248,255,139,124,36,12,255,131,232,1,15,132,244,250,1,252,248,59,133,
  233,15,131,244,251,41,252,248,193,231,3,3,189,233,248,3,139,41,137,47,139,
  105,4,131,193,8,137,111,4,131,199,8,131,232,1,15,133,244,3,248,4,139,124,
  36,16,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,
  5,137,108,36,4,139,108,36,48,137,68,36,8,137,44,36,137,116,36,24,137,149,
  233,232,251,1,31,139,149,233,15,182,78,252,253,252,233,244,1,248,7,128,165,
  233,235,139,131,233,137,171,233,255,137,133,233,252,233,244,2,255,3,68,36,
  20,255,141,76,202,8,139,105,252,248,129,121,253,252,252,239,15,133,244,29,
  252,255,165,233,255,141,76,202,8,137,215,139,105,252,248,129,121,253,252,
  252,239,15,133,244,29,248,51,139,114,252,252,252,247,198,237,15,133,244,253,
  248,1,137,106,252,248,137,68,36,20,131,232,1,15,132,244,249,248,2,139,41,
  137,47,139,105,4,137,111,4,131,199,8,131,193,8,131,232,1,15,133,244,2,139,
  106,252,248,248,3,137,209,128,189,233,1,15,135,244,251,248,4,139,68,36,20,
  252,255,165,233,248,5,255,252,247,198,237,15,133,244,4,15,182,70,252,253,
  252,247,208,141,20,194,139,122,252,248,139,191,233,139,191,233,252,233,244,
  4,248,7,15,139,244,1,131,230,252,248,41,252,242,137,215,139,114,252,252,252,
  233,244,1,255,141,76,202,8,139,105,232,139,65,252,236,137,41,137,65,4,139,
  105,252,240,139,65,252,244,137,105,8,137,65,12,139,105,224,139,65,228,137,
  105,252,248,137,65,252,252,129,252,248,239,184,3,0,0,0,15,133,244,29,252,
  255,165,233,255,15,182,252,236,139,66,252,248,141,12,202,139,128,233,15,182,
  128,233,137,124,36,16,141,188,253,194,233,43,122,252,252,133,252,237,15,132,
  244,251,141,108,252,233,252,248,57,215,15,131,244,248,248,1,139,71,252,248,
  137,1,139,71,252,252,131,199,8,137,65,4,131,193,8,57,252,233,15,131,244,249,
  57,215,15,130,244,1,248,2,199,65,4,237,131,193,8,57,252,233,15,130,244,2,
  248,3,139,124,36,16,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,171,248,5,199,68,36,20,1,0,0,0,137,208,41,252,248,15,134,244,3,255,
  137,197,193,252,237,3,131,197,1,137,108,36,20,139,108,36,48,1,200,59,133,
  233,15,135,244,253,248,6,139,71,252,248,137,1,139,71,252,252,131,199,8,137,
  65,4,131,193,8,57,215,15,130,244,6,252,233,244,3,248,7,137,149,233,137,141,
  233,137,116,36,24,41,215,139,84,36,20,131,252,234,1,137,252,233,232,251,1,
  0,139,149,233,139,141,233,1,215,252,233,244,6,255,193,225,3,255,248,1,139,
  114,252,252,137,68,36,20,252,247,198,237,15,133,244,253,255,248,17,137,215,
  131,232,1,15,132,244,249,248,2,139,44,15,137,111,252,248,139,108,15,4,137,
  111,252,252,131,199,8,131,232,1,15,133,244,2,248,3,139,68,36,20,15,182,110,
  252,255,248,5,57,197,15,135,244,252,255,139,108,10,4,137,106,252,252,139,
  44,10,137,106,252,248,255,248,5,56,70,252,255,15,135,244,252,255,15,182,78,
  252,253,252,247,209,141,20,202,139,122,252,248,139,191,233,139,191,233,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,248,6,255,199,
  71,252,252,237,131,199,8,255,199,68,194,252,244,237,255,131,192,1,252,233,
  244,5,248,7,15,139,244,18,131,230,252,248,41,252,242,255,1,252,241,255,137,
  252,245,209,252,237,129,229,239,102,131,172,253,43,233,1,15,132,244,138,255,
  141,12,202,255,129,121,253,4,239,15,135,244,52,129,121,253,12,239,15,135,
  244,52,255,139,105,20,255,129,252,253,239,15,135,244,52,255,252,242,15,16,
  1,252,242,15,16,73,8,255,252,242,15,88,65,16,252,242,15,17,1,133,252,237,
  15,136,244,249,255,15,140,244,249,255,102,15,46,200,248,1,252,242,15,17,65,
  24,255,221,65,8,221,1,255,220,65,16,221,17,221,81,24,133,252,237,15,136,244,
  247,255,221,81,24,15,140,244,247,255,217,201,248,1,255,15,183,70,252,254,
  255,15,131,244,248,141,180,253,134,233,255,141,180,253,134,233,15,183,70,
  252,254,15,131,245,255,15,130,244,248,141,180,253,134,233,255,248,3,102,15,
  46,193,252,233,244,1,255,141,12,202,139,105,4,129,252,253,239,15,132,244,
  247,255,137,105,252,252,139,41,137,105,252,248,252,233,245,255,141,180,253,
  134,233,139,1,137,105,252,252,137,65,252,248,255,139,139,233,139,4,129,139,
  128,233,139,108,36,48,137,147,233,137,171,233,252,255,224,255,141,180,253,
  134,233,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,171,255,
  254,0
};

enum {
  GLOB_gate_lf,
  GLOB_gate_lf_growstack,
  GLOB_gate_lv,
  GLOB_gate_lv_growstack,
  GLOB_gate_cwrap,
  GLOB_gate_c_growstack,
  GLOB_vm_returnc,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_gate_c,
  GLOB_vm_returnp,
  GLOB_vm_leave_cp,
  GLOB_vm_leave_unw,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_ff,
  GLOB_cont_dispatch,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vmeta_call,
  GLOB_vm_cpcall,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_cont_nop,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res_,
  GLOB_ff_type,
  GLOB_fff_res1,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_fff_resxmm0,
  GLOB_fff_resn,
  GLOB_ff_tostring,
  GLOB_fff_gcstep,
  GLOB_ff_next,
  GLOB_fff_res2,
  GLOB_fff_res,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_fff_res0,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_ff_math_abs,
  GLOB_ff_math_sqrt,
  GLOB_ff_math_floor,
  GLOB_vm_floor,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_vm_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_deg,
  GLOB_ff_math_rad,
  GLOB_ff_math_atan2,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_vm_trunc,
  GLOB_ff_math_fmod,
  GLOB_ff_math_pow,
  GLOB_vm_pow,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_len,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_rep,
  GLOB_fff_fallback_2,
  GLOB_ff_string_reverse,
  GLOB_fff_fallback_1,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_table_getn,
  GLOB_ff_bit_tobit,
  GLOB_ff_bit_band,
  GLOB_fff_resbit_op,
  GLOB_fff_fallback_bit_op,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_bswap,
  GLOB_fff_resbit,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_vm_record,
  GLOB_vm_hook,
  GLOB_vm_hotloop,
  GLOB_vm_hotcall,
  GLOB_vm_exit_handler,
  GLOB_vm_exit_interp,
  GLOB_vm_floor_sse,
  GLOB_vm_ceil_sse,
  GLOB_vm_trunc_sse,
  GLOB_vm_mod,
  GLOB_vm_exp2,
  GLOB_vm_exp2raw,
  GLOB_vm_pow_sse,
  GLOB_vm_powi_sse,
  GLOB_vm_foldfpm,
  GLOB_vm_foldarith,
  GLOB_vm_cpuid,
  GLOB_BC_MODVN_Z,
  GLOB_BC_TGETS_Z,
  GLOB_BC_TSETS_Z,
  GLOB__MAX
};
static const char *const globnames[] = {
  "gate_lf",
  "gate_lf_growstack",
  "gate_lv",
  "gate_lv_growstack",
  "gate_cwrap",
  "gate_c_growstack",
  "vm_returnc",
  "BC_RET_Z",
  "vm_return",
  "gate_c",
  "vm_returnp",
  "vm_leave_cp",
  "vm_leave_unw",
  "vm_unwind_c",
  "vm_unwind_ff",
  "cont_dispatch",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vmeta_call",
  "vm_cpcall",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "cont_nop",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_arith_vn",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vv",
  "vmeta_len",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res_",
  "ff_type",
  "fff_res1",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "fff_resxmm0",
  "fff_resn",
  "ff_tostring",
  "fff_gcstep",
  "ff_next",
  "fff_res2",
  "fff_res",
  "ff_pairs",
  "ff_ipairs_aux",
  "fff_res0",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "ff_math_abs",
  "ff_math_sqrt",
  "ff_math_floor",
  "vm_floor",
  "ff_math_ceil",
  "vm_ceil",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "vm_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_deg",
  "ff_math_rad",
  "ff_math_atan2",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "vm_trunc",
  "ff_math_fmod",
  "ff_math_pow",
  "vm_pow",
  "ff_math_min",
  "ff_math_max",
  "ff_string_len",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_rep",
  "fff_fallback_2",
  "ff_string_reverse",
  "fff_fallback_1",
  "ff_string_lower",
  "ff_string_upper",
  "ff_table_getn",
  "ff_bit_tobit",
  "ff_bit_band",
  "fff_resbit_op",
  "fff_fallback_bit_op",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_bswap",
  "fff_resbit",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "vm_record",
  "vm_hook",
  "vm_hotloop",
  "vm_hotcall",
  "vm_exit_handler",
  "vm_exit_interp",
  "vm_floor_sse",
  "vm_ceil_sse",
  "vm_trunc_sse",
  "vm_mod",
  "vm_exp2",
  "vm_exp2raw",
  "vm_pow_sse",
  "vm_powi_sse",
  "vm_foldfpm",
  "vm_foldarith",
  "vm_cpuid",
  "BC_MODVN_Z",
  "BC_TGETS_Z",
  "BC_TSETS_Z",
  (const char *)0
};
static const char *const extnames[] = {
  "lj_state_growstack@8",
  "lj_meta_tget",
  "lj_meta_tset",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_arith",
  "lj_meta_len@8",
  "lj_meta_call",
  "lj_meta_for@8",
  "lj_tab_get",
  "lj_str_fromnum@8",
  "lj_tab_next",
  "lj_tab_getinth@8",
  "lj_ffh_coroutine_wrap_err@8",
  "lj_wrapper_sinh",
  "lj_wrapper_cosh",
  "lj_wrapper_tanh",
  "lj_str_new",
  "lj_tab_len@4",
  "lj_gc_step@4",
  "lj_dispatch_ins",
  "lj_trace_hot@8",
  "lj_trace_exit@8",
  "lj_meta_cat",
  "lj_gc_barrieruv@8",
  "lj_func_closeuv@8",
  "lj_func_newL_gc",
  "lj_tab_new",
  "lj_gc_step_fixtop@4",
  "lj_tab_dup@8",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#define DtD(_V) (int)(ptrdiff_t)&(((Trace *)0)_V)
#define DtE(_V) (int)(ptrdiff_t)&(((ExitInfo *)0)_V)
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx, int cmov, int sse)
{
  dasm_put(Dst, 0);
  dasm_put(Dst, 2, Dt7(->pt), Dt9(->framesize), Dt9(->bc), Dt9(->k), Dt1(->maxstack), LJ_TNIL);
#if LJ_HASJIT
#endif
  dasm_put(Dst, 63, FRAME_VARG, -FRAME_VARG, Dt7(->pt), Dt9(->framesize), Dt1(->maxstack), Dt9(->numparams), LJ_TNIL, Dt9(->framesize), Dt9(->bc));
  dasm_put(Dst, 191, Dt9(->k), Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), DISPATCH_GL(vmstate), ~LJ_VMST_C, DISPATCH_GL(wrapf), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), FRAME_TYPE);
  dasm_put(Dst, 280, Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), DISPATCH_GL(vmstate), ~LJ_VMST_C, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), FRAME_TYPE);
  dasm_put(Dst, 362, FRAME_C, DISPATCH_GL(vmstate), ~LJ_VMST_C, Dt1(->base));
  dasm_put(Dst, 453, Dt1(->top), Dt1(->cframe), Dt1(->maxstack), LJ_TNIL, Dt1(->top));
  dasm_put(Dst, 532, Dt1(->top), CFRAME_RAWMASK, Dt1(->glref), Dt2(->vmstate), ~LJ_VMST_C, CFRAME_RAWMASK, 1+1, Dt1(->base), Dt1(->glref), GG_G2DISP, LJ_TFALSE, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP);
  dasm_put(Dst, 637, FRAME_P, LJ_TTRUE, LUA_MINSTACK, Dt9(->bc), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top), Dt7(->gate));
  dasm_put(Dst, 759, FRAME_C, CFRAME_RESUME, Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->status), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->status), Dt1(->base), Dt1(->top), FRAME_TYPE, FRAME_CP);
  dasm_put(Dst, 864, FRAME_C, Dt1(->cframe), Dt1(->cframe), Dt1(->glref), GG_G2DISP, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top), LJ_TFUNC, Dt7(->gate));
  dasm_put(Dst, 957, Dt1(->stack), Dt1(->top), Dt1(->cframe), Dt1(->cframe), FRAME_CP, LJ_TNIL, Dt7(->pt), Dt9(->k), LJ_TSTR);
  dasm_put(Dst, 1146, BC_GGET, DISPATCH_GL(tmptv), LJ_TTAB);
  if (sse) {
    dasm_put(Dst, 1182);
  } else {
    dasm_put(Dst, 1195);
  }
  dasm_put(Dst, 1208, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, Dt7(->gate), LJ_TSTR, BC_GSET, DISPATCH_GL(tmptv));
  dasm_put(Dst, 1366, LJ_TTAB);
  if (sse) {
    dasm_put(Dst, 1182);
  } else {
    dasm_put(Dst, 1195);
  }
  dasm_put(Dst, 1386, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, Dt7(->gate), Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1593, -BCBIAS_J*4, LJ_TISTRUECOND, LJ_TISTRUECOND, Dt1(->base));
  dasm_put(Dst, 1704, Dt1(->base), Dt1(->base), FRAME_CONT, LJ_TFUNC);
  dasm_put(Dst, 1833, Dt7(->gate), Dt1(->base), Dt1(->base), Dt1(->base), Dt1(->base), Dt7(->gate), Dt1(->base), Dt1(->base), GG_DISP_STATIC*4, 1+1);
  dasm_put(Dst, 1993, LJ_TISTRUECOND, 1+1, ~LJ_TNUMX);
  if (cmov) {
  dasm_put(Dst, 2089);
  } else {
  dasm_put(Dst, 2093);
  }
  dasm_put(Dst, 2102, ((char *)(&((GCfuncC *)0)->upvalue)), LJ_TSTR, 1+1, LJ_TTAB, Dt6(->metatable), LJ_TNIL, DISPATCH_GL(mmname)+4*MM_metatable, LJ_TTAB, Dt6(->hmask));
  dasm_put(Dst, 2190, Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), DtB(->next), LJ_TNIL);
  dasm_put(Dst, 2245, LJ_TUDATA, LJ_TISNUM, LJ_TNUMX, DISPATCH_GL(gcroot[GCROOT_BASEMT]), 2+1, LJ_TTAB);
  dasm_put(Dst, 2317, Dt6(->metatable), LJ_TTAB, Dt6(->metatable), LJ_TTAB, Dt6(->marked), LJ_GC_BLACK, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
  dasm_put(Dst, 2382, 2+1, LJ_TTAB, 1+1, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 2473);
  } else {
    dasm_put(Dst, 2483);
  }
  dasm_put(Dst, 2490, 1+1, LJ_TSTR, LJ_TSTR, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 2552, Dt1(->base), Dt1(->base), 1+1, LJ_TTAB, Dt1(->base));
  dasm_put(Dst, 2642, Dt1(->base), 1+2, LJ_TNIL, LJ_TNIL, 1+1, LJ_TTAB);
  dasm_put(Dst, 2748, Dt8(->upvalue[0]), LJ_TFUNC, LJ_TNIL, 1+3, 1+1, LJ_TTAB, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 2803);
  } else {
    dasm_put(Dst, 2842);
  }
  dasm_put(Dst, 2860, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->hmask), 1+0);
  dasm_put(Dst, 2946, 1+1, LJ_TTAB, Dt8(->upvalue[0]), LJ_TFUNC);
  if (sse) {
    dasm_put(Dst, 2976);
  } else {
    dasm_put(Dst, 2986);
  }
  dasm_put(Dst, 2993, 1+3, 1+1, 8+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE, LJ_TFUNC, Dt7(->gate));
  dasm_put(Dst, 3066, 2+1, LJ_TFUNC, LJ_TFUNC, 2*8+FRAME_PCALL, 2*8, 1+1, LJ_TTHREAD);
  dasm_put(Dst, 3164, Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top), Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 3229, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top));
  dasm_put(Dst, 3333, Dt1(->maxstack), LJ_TTRUE, FRAME_TYPE, LJ_TFALSE, Dt1(->top), Dt1(->top), 1+2);
  dasm_put(Dst, 3452, Dt1(->top), Dt1(->base), Dt8(->upvalue[0].gcr), Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top), Dt1(->base));
  dasm_put(Dst, 3532, Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base));
  dasm_put(Dst, 3640, LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack), FRAME_TYPE);
  dasm_put(Dst, 3736, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_CANYIELD, Dt1(->base), Dt1(->top), Dt1(->cframe), LUA_YIELD, Dt1(->status));
  if (sse) {
    dasm_put(Dst, 3822, 1+1, LJ_TISNUM);
  } else {
    dasm_put(Dst, 3883, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 3915, 1+1, FRAME_TYPE, LJ_TNIL);
  if (sse) {
    dasm_put(Dst, 3996, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
    dasm_put(Dst, 4058, 1+1, LJ_TISNUM);
  } else {
    dasm_put(Dst, 4088, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
    dasm_put(Dst, 4147, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 4174, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4243, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4300, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4363, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4453);
  if (sse) {
  dasm_put(Dst, 4465, 1+1, LJ_TISNUM);
  } else {
  dasm_put(Dst, 4496, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 4521);
  if (sse) {
  dasm_put(Dst, 4543, 1+1, LJ_TISNUM);
  } else {
  dasm_put(Dst, 4574, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 4599);
  if (sse) {
  dasm_put(Dst, 4621, 1+1, LJ_TISNUM);
  } else {
  dasm_put(Dst, 4652, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 4677);
  if (sse) {
    dasm_put(Dst, 4701, 1+1, LJ_TISNUM, Dt8(->upvalue[0]));
  } else {
    dasm_put(Dst, 4736, 1+1, LJ_TISNUM, Dt8(->upvalue[0]));
  }
  dasm_put(Dst, 4765, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4830, 1+1, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 4925);
  } else {
    dasm_put(Dst, 4931);
  }
  dasm_put(Dst, 4940);
  if (sse) {
    dasm_put(Dst, 4965);
  } else {
    dasm_put(Dst, 4971);
  }
  dasm_put(Dst, 4974, 1+2);
  if (sse) {
    dasm_put(Dst, 4983);
  } else {
    dasm_put(Dst, 4991);
  }
  dasm_put(Dst, 1590);
  if (sse) {
    dasm_put(Dst, 4999);
  } else {
    dasm_put(Dst, 5031);
  }
  dasm_put(Dst, 5050);
  if (sse) {
    dasm_put(Dst, 5066, 1+1, LJ_TISNUM);
  } else {
    dasm_put(Dst, 5091, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 5113);
  if (sse) {
    dasm_put(Dst, 5131);
  } else {
    dasm_put(Dst, 5157);
  }
  dasm_put(Dst, 5174, 1+2);
  if (sse) {
    dasm_put(Dst, 5214);
  } else {
    dasm_put(Dst, 5222);
  }
  dasm_put(Dst, 5232, 2+1, LJ_TISNUM, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 5284, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
    dasm_put(Dst, 5331, 2+1, LJ_TISNUM, LJ_TISNUM);
  }
  if (sse) {
  dasm_put(Dst, 5372, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  dasm_put(Dst, 5443, 1+1, LJ_TISNUM, LJ_TISNUM);
  if (cmov) {
  dasm_put(Dst, 5496);
  } else {
  dasm_put(Dst, 5504);
  }
  dasm_put(Dst, 5435);
  }
  if (sse) {
  dasm_put(Dst, 5525, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  dasm_put(Dst, 5596, 1+1, LJ_TISNUM, LJ_TISNUM);
  if (cmov) {
  dasm_put(Dst, 5649);
  } else {
  dasm_put(Dst, 5657);
  }
  dasm_put(Dst, 5435);
  }
  if (!sse) {
    dasm_put(Dst, 5678);
  }
  dasm_put(Dst, 5687, 1+1, LJ_TSTR);
  if (sse) {
    dasm_put(Dst, 5709, Dt5(->len));
  } else {
    dasm_put(Dst, 5720, Dt5(->len));
  }
  dasm_put(Dst, 5728, 1+1, LJ_TSTR, Dt5(->len), Dt5([1]));
  if (sse) {
    dasm_put(Dst, 5762);
  } else {
    dasm_put(Dst, 5772);
  }
  dasm_put(Dst, 5785, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+1, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 5820);
  } else {
    dasm_put(Dst, 5840);
  }
  dasm_put(Dst, 5860, Dt1(->base), Dt1(->base), LJ_TSTR, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+2, LJ_TISNUM);
  dasm_put(Dst, 2468);
  if (sse) {
    dasm_put(Dst, 5971);
  } else {
    dasm_put(Dst, 5982);
  }
  dasm_put(Dst, 5990, LJ_TSTR, LJ_TISNUM, Dt5(->len));
  if (sse) {
    dasm_put(Dst, 6020);
  } else {
    dasm_put(Dst, 6031);
  }
  dasm_put(Dst, 6039, sizeof(GCstr)-1);
  dasm_put(Dst, 6120, 2+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 6179, LJ_TSTR, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 6204);
  } else {
    dasm_put(Dst, 6211);
  }
  dasm_put(Dst, 6223, Dt5(->len), DISPATCH_GL(tmpbuf.sz), Dt5([1]), DISPATCH_GL(tmpbuf.buf), 1+1);
  dasm_put(Dst, 6293, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 6377, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz));
  dasm_put(Dst, 6436, sizeof(GCstr), DISPATCH_GL(tmpbuf.buf), 1+1, DISPATCH_GL(gc.total));
  dasm_put(Dst, 6521, DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 6596, 1+1, LJ_TTAB);
  if (sse) {
    dasm_put(Dst, 6669);
  } else {
    dasm_put(Dst, 6679);
  }
  if (sse) {
    dasm_put(Dst, 6690, 1+1, LJ_TISNUM);
  } else {
    dasm_put(Dst, 6747, 1+1, LJ_TISNUM);
  }
  if (sse) {
  dasm_put(Dst, 6791, 1+1, LJ_TISNUM);
  } else {
  dasm_put(Dst, 6839, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 6879);
  if (sse) {
  dasm_put(Dst, 6889);
  }
  dasm_put(Dst, 6894, LJ_TISNUM);
  if (sse) {
  dasm_put(Dst, 6912);
  } else {
  dasm_put(Dst, 6929);
  }
  dasm_put(Dst, 6942);
  if (sse) {
  dasm_put(Dst, 6950, 1+1, LJ_TISNUM);
  } else {
  dasm_put(Dst, 6998, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 6879);
  if (sse) {
  dasm_put(Dst, 6889);
  }
  dasm_put(Dst, 6894, LJ_TISNUM);
  if (sse) {
  dasm_put(Dst, 7038);
  } else {
  dasm_put(Dst, 7055);
  }
  dasm_put(Dst, 6942);
  if (sse) {
  dasm_put(Dst, 7068, 1+1, LJ_TISNUM);
  } else {
  dasm_put(Dst, 7116, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 6879);
  if (sse) {
  dasm_put(Dst, 6889);
  }
  dasm_put(Dst, 6894, LJ_TISNUM);
  if (sse) {
  dasm_put(Dst, 7156);
  } else {
  dasm_put(Dst, 7173);
  }
  dasm_put(Dst, 6942);
  if (sse) {
  dasm_put(Dst, 7186, 1+1, LJ_TISNUM);
  } else {
  dasm_put(Dst, 7234, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 7274);
  if (sse) {
  dasm_put(Dst, 7281, 1+1, LJ_TISNUM);
  } else {
  dasm_put(Dst, 7329, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 7369);
  if (sse) {
    dasm_put(Dst, 7373);
  } else {
    dasm_put(Dst, 7400);
  }
  dasm_put(Dst, 7415);
  if (sse) {
    dasm_put(Dst, 6664);
  }
  dasm_put(Dst, 7418);
  if (sse) {
  dasm_put(Dst, 7427, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  dasm_put(Dst, 7501, 2+1, LJ_TISNUM, LJ_TISNUM);
  }
  dasm_put(Dst, 7567);
  if (sse) {
  dasm_put(Dst, 7576, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  dasm_put(Dst, 7650, 2+1, LJ_TISNUM, LJ_TISNUM);
  }
  dasm_put(Dst, 7716);
  if (sse) {
  dasm_put(Dst, 7726, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  dasm_put(Dst, 7800, 2+1, LJ_TISNUM, LJ_TISNUM);
  }
  dasm_put(Dst, 7866);
  if (sse) {
  dasm_put(Dst, 7876, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  dasm_put(Dst, 7950, 2+1, LJ_TISNUM, LJ_TISNUM);
  }
  dasm_put(Dst, 8016);
  if (sse) {
  dasm_put(Dst, 8025, 1+1, LJ_TISNUM, LJ_TISNUM);
  } else {
  dasm_put(Dst, 8099, 2+1, LJ_TISNUM, LJ_TISNUM);
  }
  dasm_put(Dst, 8165, 1+2, 1+1, Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), Dt8(->f), Dt1(->base));
  dasm_put(Dst, 8249, Dt1(->top), Dt7(->gate), LJ_TFUNC, Dt7(->gate), Dt1(->base), LUA_MINSTACK, Dt1(->base), Dt1(->top));
  dasm_put(Dst, 8368, Dt1(->base), Dt1(->top));
#if LJ_HASJIT
  dasm_put(Dst, 8409, DISPATCH_GL(hookmask), HOOK_VMEVENT, HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount));
#endif
  dasm_put(Dst, 8440, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), LUA_MASKLINE, Dt1(->base), Dt1(->base), GG_DISP_STATIC*4);
#if LJ_HASJIT
  dasm_put(Dst, 8531, Dt1(->base), GG_DISP2J, DISPATCH_J(L));
#endif
  dasm_put(Dst, 8560);
#if LJ_HASJIT
  dasm_put(Dst, 8563, Dt1(->base), GG_DISP2J, DISPATCH_J(L), Dt1(->base));
#endif
  dasm_put(Dst, 8609);
#if LJ_HASJIT
  dasm_put(Dst, 8612, DISPATCH_GL(vmstate), DISPATCH_GL(vmstate), ~LJ_VMST_EXIT, DISPATCH_J(exitno), DISPATCH_J(parent), 8*8+16, DISPATCH_J(flags), JIT_F_SSE2, DISPATCH_GL(jit_L), DISPATCH_GL(jit_base), DISPATCH_J(L), Dt1(->base), GG_DISP2J, Dt1(->base));
#endif
  dasm_put(Dst, 8755);
#if LJ_HASJIT
  dasm_put(Dst, 8758, Dt7(->pt), Dt9(->k), DISPATCH_GL(jit_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP);
#endif
  dasm_put(Dst, 8798);
  if (!sse) {
  dasm_put(Dst, 8801);
  }
  dasm_put(Dst, 8846);
  if (!sse) {
  dasm_put(Dst, 8948);
  }
  dasm_put(Dst, 8993);
  if (!sse) {
  dasm_put(Dst, 9095);
  }
  dasm_put(Dst, 9134);
  if (sse) {
    dasm_put(Dst, 9239);
  } else {
    dasm_put(Dst, 9369);
  }
  dasm_put(Dst, 9416);
  if (!sse) {
  dasm_put(Dst, 9490);
  if (cmov) {
  dasm_put(Dst, 9501);
  } else {
  dasm_put(Dst, 9505);
  }
  dasm_put(Dst, 9512);
  dasm_put(Dst, 9586);
  dasm_put(Dst, 9686);
  if (cmov) {
  dasm_put(Dst, 9689);
  } else {
  dasm_put(Dst, 9693);
  }
  dasm_put(Dst, 9700);
  if (cmov) {
  dasm_put(Dst, 9501);
  } else {
  dasm_put(Dst, 9505);
  }
  dasm_put(Dst, 9718);
  } else {
    dasm_put(Dst, 9797);
  }
  dasm_put(Dst, 9800);
  dasm_put(Dst, 9885);
  dasm_put(Dst, 10016);
  dasm_put(Dst, 10215);
  if (sse) {
    dasm_put(Dst, 10238);
    dasm_put(Dst, 10295);
    dasm_put(Dst, 10386);
  } else {
    dasm_put(Dst, 10428);
    dasm_put(Dst, 10520);
  }
  dasm_put(Dst, 10566);
  if (sse) {
    dasm_put(Dst, 10572);
    dasm_put(Dst, 10677);
    dasm_put(Dst, 10760);
  } else {
    dasm_put(Dst, 10832);
    dasm_put(Dst, 10915);
    if (cmov) {
    dasm_put(Dst, 10970);
    } else {
    dasm_put(Dst, 10989);
    }
    dasm_put(Dst, 10828);
  }
  dasm_put(Dst, 11030);
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop, int cmov, int sse)
{
  int vk = 0;
  dasm_put(Dst, 11084, defop);

  switch (op) {

  /* -- Comparison ops ---------------------------------------------------- */

  /* Remember: all ops branch for a true comparison, fall through otherwise. */

  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
    dasm_put(Dst, 11086, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 11107);
    } else {
      dasm_put(Dst, 11122);
      if (cmov) {
      dasm_put(Dst, 11132);
      } else {
      dasm_put(Dst, 11138);
      }
    }
    switch (op) {
    case BC_ISLT:
      dasm_put(Dst, 11145);
      break;
    case BC_ISGE:
      dasm_put(Dst, 10381);
      break;
    case BC_ISLE:
      dasm_put(Dst, 6591);
      break;
    case BC_ISGT:
      dasm_put(Dst, 11150);
      break;
    default: break;  /* Shut up GCC. */
    }
    dasm_put(Dst, 11155, -BCBIAS_J*4);
    break;

  case BC_ISEQV: case BC_ISNEV:
    vk = op == BC_ISEQV;
    dasm_put(Dst, 11188, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 11214);
    } else {
      dasm_put(Dst, 11226);
      if (cmov) {
      dasm_put(Dst, 11132);
      } else {
      dasm_put(Dst, 11138);
      }
    }
  iseqne_fp:
    if (vk) {
      dasm_put(Dst, 11233);
    } else {
      dasm_put(Dst, 11242);
    }
  iseqne_end:
    if (vk) {
      dasm_put(Dst, 11251, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 11266, -BCBIAS_J*4);
    }
    dasm_put(Dst, 8590);
    if (op == BC_ISEQV || op == BC_ISNEV) {
      dasm_put(Dst, 11281, LJ_TISPRI, LJ_TISTABUD, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq);
      if (vk) {
	dasm_put(Dst, 11339);
      } else {
	dasm_put(Dst, 11343);
      }
      dasm_put(Dst, 11349);
    }
    break;
  case BC_ISEQS: case BC_ISNES:
    vk = op == BC_ISEQS;
    dasm_put(Dst, 11354, LJ_TSTR);
  iseqne_test:
    if (vk) {
      dasm_put(Dst, 11237);
    } else {
      dasm_put(Dst, 10515);
    }
    goto iseqne_end;
  case BC_ISEQN: case BC_ISNEN:
    vk = op == BC_ISEQN;
    dasm_put(Dst, 11377, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 11391);
    } else {
      dasm_put(Dst, 11403);
      if (cmov) {
      dasm_put(Dst, 11132);
      } else {
      dasm_put(Dst, 11138);
      }
    }
    goto iseqne_fp;
  case BC_ISEQP: case BC_ISNEP:
    vk = op == BC_ISEQP;
    dasm_put(Dst, 11410);
    goto iseqne_test;

  /* -- Unary test and copy ops ------------------------------------------- */

  case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
    dasm_put(Dst, 11421, LJ_TISTRUECOND);
    if (op == BC_IST || op == BC_ISTC) {
      dasm_put(Dst, 11433);
    } else {
      dasm_put(Dst, 11438);
    }
    if (op == BC_ISTC || op == BC_ISFC) {
      dasm_put(Dst, 11443);
    }
    dasm_put(Dst, 11454, -BCBIAS_J*4);
    break;

  /* -- Unary ops --------------------------------------------------------- */

  case BC_MOV:
    dasm_put(Dst, 11485);
    break;
  case BC_NOT:
    dasm_put(Dst, 11518, LJ_TISTRUECOND, LJ_TTRUE);
    break;
  case BC_UNM:
    dasm_put(Dst, 11553, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 11564);
    } else {
      dasm_put(Dst, 11594);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_LEN:
    dasm_put(Dst, 11603, LJ_TSTR);
    if (sse) {
      dasm_put(Dst, 11617, Dt5(->len));
    } else {
      dasm_put(Dst, 11635, Dt5(->len));
    }
    dasm_put(Dst, 11644, LJ_TTAB);
    if (sse) {
      dasm_put(Dst, 11684);
    } else {
      dasm_put(Dst, 11693);
    }
    dasm_put(Dst, 11703);
    break;

  /* -- Binary ops -------------------------------------------------------- */


  case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
    dasm_put(Dst, 11713);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11721, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11733);
    } else {
    dasm_put(Dst, 11747);
    }
      break;
    case 1:
    dasm_put(Dst, 11755, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11767);
    } else {
    dasm_put(Dst, 11781);
    }
      break;
    default:
    dasm_put(Dst, 11789, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11811);
    } else {
    dasm_put(Dst, 11825);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 11587);
    } else {
    dasm_put(Dst, 11599);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
    dasm_put(Dst, 11713);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11721, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11833);
    } else {
    dasm_put(Dst, 11847);
    }
      break;
    case 1:
    dasm_put(Dst, 11755, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11855);
    } else {
    dasm_put(Dst, 11869);
    }
      break;
    default:
    dasm_put(Dst, 11789, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11877);
    } else {
    dasm_put(Dst, 11891);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 11587);
    } else {
    dasm_put(Dst, 11599);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_MULVN: case BC_MULNV: case BC_MULVV:
    dasm_put(Dst, 11713);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11721, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11899);
    } else {
    dasm_put(Dst, 11913);
    }
      break;
    case 1:
    dasm_put(Dst, 11755, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11921);
    } else {
    dasm_put(Dst, 11935);
    }
      break;
    default:
    dasm_put(Dst, 11789, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11943);
    } else {
    dasm_put(Dst, 11957);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 11587);
    } else {
    dasm_put(Dst, 11599);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
    dasm_put(Dst, 11713);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11721, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11965);
    } else {
    dasm_put(Dst, 11979);
    }
      break;
    case 1:
    dasm_put(Dst, 11755, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11987);
    } else {
    dasm_put(Dst, 12001);
    }
      break;
    default:
    dasm_put(Dst, 11789, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12009);
    } else {
    dasm_put(Dst, 12023);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 11587);
    } else {
    dasm_put(Dst, 11599);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_MODVN:
    dasm_put(Dst, 11713);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11721, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12031);
    } else {
    dasm_put(Dst, 12045);
    }
      break;
    case 1:
    dasm_put(Dst, 11755, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12053);
    } else {
    dasm_put(Dst, 12067);
    }
      break;
    default:
    dasm_put(Dst, 11789, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12075);
    } else {
    dasm_put(Dst, 12089);
    }
      break;
    }
    dasm_put(Dst, 12097);
    if (sse) {
    dasm_put(Dst, 11587);
    } else {
    dasm_put(Dst, 11599);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_MODNV: case BC_MODVV:
    dasm_put(Dst, 11713);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11721, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12031);
    } else {
    dasm_put(Dst, 12045);
    }
      break;
    case 1:
    dasm_put(Dst, 11755, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12053);
    } else {
    dasm_put(Dst, 12067);
    }
      break;
    default:
    dasm_put(Dst, 11789, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12075);
    } else {
    dasm_put(Dst, 12089);
    }
      break;
    }
    dasm_put(Dst, 12103);
    break;
  case BC_POW:
    dasm_put(Dst, 11713);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11721, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12031);
    } else {
    dasm_put(Dst, 12045);
    }
      break;
    case 1:
    dasm_put(Dst, 11755, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12053);
    } else {
    dasm_put(Dst, 12067);
    }
      break;
    default:
    dasm_put(Dst, 11789, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 12075);
    } else {
    dasm_put(Dst, 12089);
    }
      break;
    }
    dasm_put(Dst, 12108);
    if (sse) {
    dasm_put(Dst, 11587);
    } else {
    dasm_put(Dst, 11599);
    }
    dasm_put(Dst, 8590);
    break;

  case BC_CAT:
    dasm_put(Dst, 12112, Dt1(->base), Dt1(->base));
    break;

  /* -- Constant ops ------------------------------------------------------ */

  case BC_KSTR:
    dasm_put(Dst, 12206, LJ_TSTR);
    break;
  case BC_KSHORT:
    if (sse) {
      dasm_put(Dst, 12239);
    } else {
      dasm_put(Dst, 12254);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_KNUM:
    if (sse) {
      dasm_put(Dst, 12262);
    } else {
      dasm_put(Dst, 12275);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_KPRI:
    dasm_put(Dst, 12282);
    break;
  case BC_KNIL:
    dasm_put(Dst, 12308, LJ_TNIL);
    break;

  /* -- Upvalue and function ops ------------------------------------------ */

  case BC_UGET:
    dasm_put(Dst, 12354, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETV:
#define TV2MARKOFS \
 ((int32_t)offsetof(GCupval, marked)-(int32_t)offsetof(GCupval, tv))
    dasm_put(Dst, 12398, offsetof(GCfuncL, uvptr), DtA(->closed), DtA(->v), TV2MARKOFS, LJ_GC_BLACK, LJ_TISGCV, LJ_TISNUM - LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES, GG_DISP2G);
    dasm_put(Dst, 12488);
    break;
#undef TV2MARKOFS
  case BC_USETS:
    dasm_put(Dst, 12500, offsetof(GCfuncL, uvptr), DtA(->v), LJ_TSTR, DtA(->marked), LJ_GC_BLACK, Dt4(->gch.marked), LJ_GC_WHITES, DtA(->closed), GG_DISP2G);
    break;
  case BC_USETN:
    dasm_put(Dst, 12591);
    if (sse) {
      dasm_put(Dst, 12596);
    } else {
      dasm_put(Dst, 11406);
    }
    dasm_put(Dst, 12603, offsetof(GCfuncL, uvptr), DtA(->v));
    if (sse) {
      dasm_put(Dst, 4965);
    } else {
      dasm_put(Dst, 4971);
    }
    dasm_put(Dst, 8590);
    break;
  case BC_USETP:
    dasm_put(Dst, 12612, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_UCLO:
    dasm_put(Dst, 12649, -BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
    break;

  case BC_FNEW:
    dasm_put(Dst, 12703, Dt1(->base), Dt1(->base), LJ_TFUNC);
    break;

  /* -- Table ops --------------------------------------------------------- */

  case BC_TNEW:
    dasm_put(Dst, 12774, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
    break;
  case BC_TDUP:
    dasm_put(Dst, 12885, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
    break;

  case BC_GGET:
    dasm_put(Dst, 12977, Dt7(->env));
    break;
  case BC_GSET:
    dasm_put(Dst, 12995, Dt7(->env));
    break;

  case BC_TGETV:
    dasm_put(Dst, 13013, LJ_TTAB, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 13046);
    } else {
      dasm_put(Dst, 13067);
      if (cmov) {
      dasm_put(Dst, 11132);
      } else {
      dasm_put(Dst, 11138);
      }
      dasm_put(Dst, 2856);
    }
    dasm_put(Dst, 13077, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 13169, LJ_TSTR);
    break;
  case BC_TGETS:
    dasm_put(Dst, 13187, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 13271, LJ_TNIL, DtB(->next), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;
  case BC_TGETB:
    dasm_put(Dst, 13342, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 11703);
    break;

  case BC_TSETV:
    dasm_put(Dst, 13441, LJ_TTAB, LJ_TISNUM);
    if (sse) {
      dasm_put(Dst, 13046);
    } else {
      dasm_put(Dst, 13067);
      if (cmov) {
      dasm_put(Dst, 11132);
      } else {
      dasm_put(Dst, 11138);
      }
      dasm_put(Dst, 2856);
    }
    dasm_put(Dst, 13474, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable));
    dasm_put(Dst, 13557, Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETS:
    dasm_put(Dst, 13619, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->nomm), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 13694, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, DtB(->next));
    dasm_put(Dst, 13786, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt1(->base), Dt1(->base), Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETB:
    dasm_put(Dst, 13882, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable));
    dasm_put(Dst, 13980, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  case BC_TSETM:
    dasm_put(Dst, 14026);
    if (sse) {
      dasm_put(Dst, 12596);
    } else {
      dasm_put(Dst, 14031);
    }
    dasm_put(Dst, 14039, Dt6(->marked), LJ_GC_BLACK);
    if (sse) {
      dasm_put(Dst, 14064);
    } else {
      dasm_put(Dst, 14071);
    }
    dasm_put(Dst, 14076, Dt6(->asize), Dt6(->array), Dt1(->base), Dt1(->base), Dt6(->marked), cast_byte(~LJ_GC_BLACK), DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain));
    dasm_put(Dst, 14204, Dt6(->gclist));
    break;

  /* -- Calls and vararg handling ----------------------------------------- */

  case BC_CALL: case BC_CALLM:
    dasm_put(Dst, 11717);
    if (op == BC_CALLM) {
      dasm_put(Dst, 14212);
    }
    dasm_put(Dst, 14217, LJ_TFUNC, Dt7(->gate));
    break;

  case BC_CALLMT:
    dasm_put(Dst, 14212);
    break;
  case BC_CALLT:
    dasm_put(Dst, 14240, LJ_TFUNC, FRAME_TYPE, Dt7(->ffid), Dt7(->gate));
    dasm_put(Dst, 14345, FRAME_TYPE, Dt7(->pt), Dt9(->k));
    break;

  case BC_ITERC:
    dasm_put(Dst, 14402, LJ_TFUNC, Dt7(->gate));
    break;

  case BC_VARG:
    dasm_put(Dst, 14464, Dt7(->pt), Dt9(->numparams), (8+FRAME_VARG), LJ_TNIL);
    dasm_put(Dst, 14608, Dt1(->maxstack), Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
    break;

  /* -- Returns ----------------------------------------------------------- */

  case BC_RETM:
    dasm_put(Dst, 14212);
    break;

  case BC_RET: case BC_RET0: case BC_RET1:
    if (op != BC_RET0) {
      dasm_put(Dst, 14707);
    }
    dasm_put(Dst, 14711, FRAME_TYPE);
    switch (op) {
    case BC_RET:
      dasm_put(Dst, 14730);
      break;
    case BC_RET1:
      dasm_put(Dst, 14788);
      /* fallthrough */
    case BC_RET0:
      dasm_put(Dst, 14804);
    default:
      break;
    }
    dasm_put(Dst, 14815, Dt7(->pt), Dt9(->k));
    if (op == BC_RET) {
      dasm_put(Dst, 14857, LJ_TNIL);
    } else {
      dasm_put(Dst, 14866, LJ_TNIL);
    }
    dasm_put(Dst, 14873);
    if (op != BC_RET0) {
      dasm_put(Dst, 14894);
    }
    dasm_put(Dst, 5061);
    break;

  /* -- Loops and branches ------------------------------------------------ */


  case BC_FORL:
#if LJ_HASJIT
    dasm_put(Dst, 14898, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_JFORI:
  case BC_JFORL:
#if !LJ_HASJIT
    break;
#endif
  case BC_FORI:
  case BC_IFORL:
    vk = (op == BC_IFORL || op == BC_JFORL);
    dasm_put(Dst, 14919);
    if (!vk) {
      dasm_put(Dst, 14923, LJ_TISNUM, LJ_TISNUM);
    }
    dasm_put(Dst, 14942);
    if (!vk) {
      dasm_put(Dst, 14946, LJ_TISNUM);
    }
    if (sse) {
      dasm_put(Dst, 14955);
      if (vk) {
	dasm_put(Dst, 14967);
      } else {
        dasm_put(Dst, 14986);
      }
      dasm_put(Dst, 14991);
    } else {
      dasm_put(Dst, 15004);
      if (vk) {
	dasm_put(Dst, 15010);
      } else {
	dasm_put(Dst, 15026);
      }
      dasm_put(Dst, 15034);
      if (cmov) {
      dasm_put(Dst, 11132);
      } else {
      dasm_put(Dst, 11138);
      }
      if (!cmov) {
	dasm_put(Dst, 15039);
      }
    }
    if (op == BC_FORI) {
      dasm_put(Dst, 15045, -BCBIAS_J*4);
    } else if (op == BC_JFORI) {
      dasm_put(Dst, 15055, -BCBIAS_J*4, BC_JLOOP);
    } else if (op == BC_IFORL) {
      dasm_put(Dst, 15069, -BCBIAS_J*4);
    } else {
      dasm_put(Dst, 15065, BC_JLOOP);
    }
    dasm_put(Dst, 11167);
    if (sse) {
      dasm_put(Dst, 15079);
    }
    break;

  case BC_ITERL:
#if LJ_HASJIT
    dasm_put(Dst, 14898, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_JITERL:
#if !LJ_HASJIT
    break;
#endif
  case BC_IITERL:
    dasm_put(Dst, 15090, LJ_TNIL);
    if (op == BC_JITERL) {
      dasm_put(Dst, 15105, BC_JLOOP);
    } else {
      dasm_put(Dst, 15119, -BCBIAS_J*4);
    }
    dasm_put(Dst, 11464);
    break;

  case BC_LOOP:
#if LJ_HASJIT
    dasm_put(Dst, 14898, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_ILOOP:
    dasm_put(Dst, 8590);
    break;

  case BC_JLOOP:
#if LJ_HASJIT
    dasm_put(Dst, 15135, DISPATCH_J(trace), DtD(->mcode), DISPATCH_GL(jit_base), DISPATCH_GL(jit_L));
#endif
    break;

  case BC_JMP:
    dasm_put(Dst, 15158, -BCBIAS_J*4);
    break;

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;
  int cmov = 1;
  int sse = 0;
#ifdef LUAJIT_CPU_NOCMOV
  cmov = 0;
#endif
#if defined(LUAJIT_CPU_SSE2) || defined(LJ_TARGET_X64)
  sse = 1;
#endif

  dasm_growpc(Dst, BC__MAX);

  build_subroutines(ctx, cmov, sse);

  dasm_put(Dst, 15182);
  for (op = 0; op < BC__MAX; op++)
    build_ins(ctx, (BCOp)op, op, cmov, sse);

  return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions. */
static void emit_asm_debug(BuildCtx *ctx)
{
  switch (ctx->mode) {
  case BUILD_elfasm:
    fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe0:\n"
	"\t.long .LECIE0-.LSCIE0\n"
	".LSCIE0:\n"
	"\t.long 0xffffffff\n"
	"\t.byte 0x1\n"
	"\t.string \"\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -4\n"
	"\t.byte 0x8\n"
	"\t.byte 0xc\n\t.uleb128 0x4\n\t.uleb128 0x4\n"
	"\t.byte 0x88\n\t.uleb128 0x1\n"
	"\t.align 4\n"
	".LECIE0:\n\n");
    fprintf(ctx->fp,
	".LSFDE0:\n"
	"\t.long .LEFDE0-.LASFDE0\n"
	".LASFDE0:\n"
	"\t.long .Lframe0\n"
	"\t.long .Lbegin\n"
	"\t.long %d\n"
	"\t.byte 0xe\n\t.uleb128 0x30\n"	/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
	"\t.align 4\n"
	".LEFDE0:\n\n", (int)ctx->codesz);
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe1:\n"
	"\t.long .LECIE1-.LSCIE1\n"
	".LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zPR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -4\n"
	"\t.byte 0x8\n"
	"\t.uleb128 6\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.long lj_err_unwind_dwarf-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 0x4\n\t.uleb128 0x4\n"
	"\t.byte 0x88\n\t.uleb128 0x1\n"
	"\t.align 4\n"
	".LECIE1:\n\n");
    fprintf(ctx->fp,
	".LSFDE1:\n"
	"\t.long .LEFDE1-.LASFDE1\n"
	".LASFDE1:\n"
	"\t.long .LASFDE1-.Lframe1\n"
	"\t.long .Lbegin-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 0x30\n"	/* def_cfa_offset */
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
	"\t.align 4\n"
	".LEFDE1:\n\n", (int)ctx->codesz);
    break;
  case BUILD_machasm:
    fprintf(ctx->fp, "\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n");
    fprintf(ctx->fp,
	"EH_frame1:\n"
	"\t.set L$set$0,LECIE1-LSCIE1\n"
	"\t.long L$set$0\n"
	"LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.ascii \"zPR\\0\"\n"
	"\t.byte 0x1\n"
	"\t.byte 128-4\n"
	"\t.byte 0x8\n"
	"\t.byte 6\n"				/* augmentation length */
	"\t.byte 0x9b\n"			/* indirect|pcrel|sdata4 */
	"\t.long L_lj_err_unwind_dwarf$non_lazy_ptr-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte 0x5\n\t.byte 0x4\n"  /* esp=5 on 32 bit MACH-O. */
	"\t.byte 0x88\n\t.byte 0x1\n"
	"\t.align 2\n"
	"LECIE1:\n\n");
    fprintf(ctx->fp,
	"_lj_vm_asm_begin.eh:\n"
	"LSFDE1:\n"
	"\t.set L$set$1,LEFDE1-LASFDE1\n"
	"\t.long L$set$1\n"
	"LASFDE1:\n"
	"\t.long LASFDE1-EH_frame1\n"
	"\t.long _lj_vm_asm_begin-.\n"
	"\t.long %d\n"
	"\t.byte 0\n"				/* augmentation length */
	"\t.byte 0xe\n\t.byte 0x30\n"		/* def_cfa_offset */
	"\t.byte 0x84\n\t.byte 0x2\n"		/* offset ebp (4 for MACH-O)*/
	"\t.byte 0x87\n\t.byte 0x3\n"		/* offset edi */
	"\t.byte 0x86\n\t.byte 0x4\n"		/* offset esi */
	"\t.byte 0x83\n\t.byte 0x5\n"		/* offset ebx */
	"\t.align 2\n"
	"LEFDE1:\n\n", (int)ctx->codesz);
      fprintf(ctx->fp,
	"\t.non_lazy_symbol_pointer\n"
	"L_lj_err_unwind_dwarf$non_lazy_ptr:\n"
	".indirect_symbol _lj_err_unwind_dwarf\n"
	".long 0\n");
    break;
  default:  /* Difficult for other modes. */
    break;
  }
}

